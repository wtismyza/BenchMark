<!DOCTYPE OMCCommand>

<!--	<command name="cd($0)">									-->
<!--		<field name="$0">dir</field>							-->
<!--		<helptext>...help about command...</helptext>			-->
<!--	</command>													-->

<!--	HINT: Every field specified by $ followed by an integer, 	-->
<!--	for example $1,	can be selected in the program to make 		-->
<!--	editing easier for the user. The field name must start with	-->
<!--	the integer 0, followed by 1, and the next 2... and so on.	-->
<!--	The fields will be selected in the same order as the field	-->
<!-- 	names, starting with 0.						-->

<commands>
	<!-- Shell commands -->
	<command name="cd()">
		<helptext>Return the current directory.</helptext>
	</command>
	<command name='cd("$0")'>
		<field name="$0">dir</field>
		<helptext>Change directory to the directory given as a string. Ex: cd("myModels/myLibrary").</helptext>
	</command>
	<command name="clear()">
		<helptext>Clear everything.</helptext>
	</command>
	<command name="clearVariables()">
		<helptext>Clear the variables.</helptext>
	</command>
	<command name="help()">
		<helptext>Print help text (returned as a string).</helptext>
	</command>
	<command name='help("omc")'>
		<helptext>The command-line options available for omc.</helptext>
	</command>
	<command name='help("debug")'>
		<helptext>Flags that enable debugging, diagnostics, and research prototypes.</helptext>
	</command>
	<command name='help("optmodules")'>
		<helptext>Flags that determine which symbolic methods are used to produce the causalized equation system.</helptext>
	</command>
	<command name='help("simulation")'>
		<helptext>The command-line options available for simulation executables generated by OpenModelica.</helptext>
	</command>
	<command name='help("$0")'>
		<helptext>Displays option descriptions for multi-option flag &lt;flagname>.</helptext>
		<field name="$0">flagname</field>
	</command>
	<command name="instantiateModel($0)">
		<field name="$0">modelname</field>
		<helptext>Instantiates a model/class and returns a string containing the flat class definition. Ex: instantiateModel(dcmotor).</helptext>
	</command>
	<command name="list()">
		<helptext>Return a string containing all class definitions.</helptext>
	</command>
	<command name="list($0)">
		<field name="$0">modelname</field>
		<helptext>Return a string containing the class definition of the named class. Ex: list(dcmotor).</helptext>
	</command>
	<command name="listVariables()">
		<helptext>Return a vector of the currently defined variable names.</helptext>
	</command>
	<command name='loadFile("$0")'>
		<field name="$0">strFile</field>
		<helptext>Load modelica file given as string argument. Ex: loadFile("../myLibrary/myModels.mo").</helptext>
	</command>
	<command name='loadFiles({"$0"})'>
		<field name="$0">strFiles</field>
		<helptext>Load modelica files given as string arrray. Ex: loadFiles({"modelA.mo", "modelB.mo").</helptext>
	</command>
	<command name="loadModel($0)">
		<field name="$0">name</field>
		<helptext>Load model, function, or package relative to $OPENMODELICALIBRARY. Ex: loadModel(Modelica.Electrical).</helptext>
	</command>
	<command name="plot($0)">
		<field name="$0">var</field>
		<helptext>Plot a variable from the most recently simulated model. Ex: plot(x).</helptext>
	</command>
	<command name="plot({$0})">
		<field name="$0">vars</field>
		<helptext>Plot variables from the most recently simulated model given as a vector. Ex: plot({x,y}).</helptext>
	</command>
	<command name="plotParametric($0, $1)">
		<field name="$0">var1</field>
		<field name="$1">var2</field>
		<helptext>Plot var2 relative to var1 from the most recently simulated model. Ex: plotParametric(x,y).</helptext>
	</command>
	<command name='plotAll("$0")'>
		<field name="$0">"className_res.mat"</field>
		<helptext>Plot all variables from the specified file. Ex: plotAll("Class_res.mat").</helptext>
	</command>
	<command name='readFile("$0")'>
		<field name="$0">str</field>
		<helptext>Load file given as string and return a string of the file content. Ex: readFile("myModel/myModelr.mo").</helptext>
	</command>
	<command name='readSimulationResultSize("$0")'>
		<field name="$0">strFile</field>
		<helptext>Return the size of the record resulting from a simulation. The size is read from the result file, given as a string. Ex:  readSimulationResultSize("dcmotor_res.plt").</helptext>
	</command>
	<command name='readSimulationResult("$0", $1, $2)'>
		<field name="$0">strFile</field>
		<field name="$1">variables</field>
		<field name="$2">size</field>
		<helptext>Read the results of a simulation from a file named by the string argument strFile. Here size is the size of the resulting record and variables is a vector of the variables to investigate. Ex: readSimulationResult("dcmotor_res.plt", {R1.i,L1.v}, 10).</helptext>
	</command>
	<command name='runScript("$0")'>
		<field name="$0">strFile</field>
		<helptext>Exectute script file (.mos) given as string argument. Ex: runScript("simulation.mos").</helptext>
	</command>
	<command name='saveModel("$0", $1)'>
		<field name="$0">strFile</field>
		<field name="$1">modelname</field>
		<helptext>Save the model/class with name modelname in the file given by the strFile string argument.</helptext>
	</command>
	<command name="simulate($0, stopTime=$1)">
		<field name="$0">modelname</field>
		<field name="$1">1</field>
		<helptext>Translates a model and simulates it. Ex: simulate(dcmotor). Ex: simulate(dcmotor, stopTime=10).</helptext>
	</command>
	<command name="simulate($0, startTime=$1, stopTime=$2, numberOfIntervals=$3, tolerance=$4, method=$5, outputFormat=$6)">
		<field name="$0">modelname</field>
		<field name="$1">0</field>
		<field name="$2">1</field>
		<field name="$3">500</field>
		<field name="$4">1e-6</field>
		<field name="$5">"dassl"</field>
		<field name="$6">"mat"</field>
		<helptext>Translates a model and simulates it. Ex: simulate(dcmotor). Ex: simulate(dcmotor, startTime=0, stopTime=10, numberOfIntervals=1000).</helptext>
	</command>
	<command name="buildModel($0, startTime=$1, stopTime=$2, numberOfIntervals=$3, tolerance=$4, storeInTemp=$5, method=$6, outputFormat=$7)">
		<field name="$0">modelname</field>
		<field name="$1">0</field>
		<field name="$2">1</field>
		<field name="$3">500</field>
		<field name="$4">1e-6</field>
		<field name="$5">false</field>
		<field name="$6">"dassl"</field>
		<field name="$7">"mat"</field>
		<helptext>Translates a model and build it. It does not run the code! Ex: buildModel(dcmotor). Ex: buildMotor(dcmotor, startTime=0, stopTime=10, numberOfIntervals=1000).</helptext>
	</command>
	<command name='system("$0")'>
		<field name="$0">str</field>
		<helptext>Execute str as a system(shell) command, return integer success value. Ex: system("touch myFile").</helptext>
	</command>
	<command name="timing($0)">
		<field name="$0">expr</field>
		<helptext>Evaluates expression and returns the number of seconds the evaluation took. Ex: timing(x*4711+5).</helptext>
	</command>
	<command name="typeOf($0)">
		<field name="$0">variable</field>
		<helptext>Returns the type of the variable as a string. Ex: typeOf(R1.v).</helptext>
	</command>
	<command name="val($0, timePoint=$1)">
		<field name="$0">variable</field>
		<field name="$1">0.0</field>
		<helptext>Returns the value of the variable at given point in time as a string. Ex: val(R1.v, 10.0).</helptext>
	</command>
	<command name="quit()">
		<helptext>Leave OpenModelica and kill the process.</helptext>
	</command>
	<command name="class $0">
		<field name="$0">name</field>
		<helptext>New generic class.</helptext>
	</command>
	<command name="model $0">
		<field name="$0">name</field>
		<helptext>New model.</helptext>
	</command>
	<command name="block $0">
		<field name="$0">name</field>
		<helptext>New block.</helptext>
	</command>
	<command name="package $0">
		<field name="$0">name</field>
		<helptext>New package.</helptext>
	</command>
	<command name="record $0">
		<field name="$0">name</field>
		<helptext>New record.</helptext>
	</command>
	<command name="connector $0">
		<field name="$0">name</field>
		<helptext>New connector.</helptext>
	</command>
	<command name="type $0">
		<field name="$0">name</field>
		<helptext>New type.</helptext>
	</command>
	<command name="function $0">
		<field name="$0">name</field>
		<helptext>New function.</helptext>
	</command>

	<!-- keywords -->
	<keyword name="\bclass\b"></keyword>
	<keyword name="\bmodel\b"></keyword>
	<keyword name="\bblock\b"></keyword>
	<keyword name="\bpackage\b"></keyword>
	<keyword name="\brecord\b"></keyword>
	<keyword name="\bconnector\b"></keyword>
	<keyword name="\btype\b"></keyword>
	<keyword name="\bfunction\b"></keyword>

	<!-- Modelica language elements -->
	<element name="Real $0">
		<field name="$0">name</field>
	</element>
	<element name="Integer $0">
		<field name="$0">name</field>
	</element>
	<element name="Boolean $0">
		<field name="$0">name</field>
	</element>
	<element name="String $0">
		<field name="$0">name</field>
	</element>
	<element name="enumeration ($0,$1)">
		<field name="$0">e1</field>
		<field name="$1">e2</field>
	</element>
	<element name="class $0">
		<field name="$0">name</field>
		<helptext>New class.</helptext>
	</element>
	<element name="model $0">
		<field name="$0">name</field>
		<helptext>New model.</helptext>
	</element>
	<element name="block $0">
		<field name="$0">name</field>
		<helptext>New block.</helptext>
	</element>
	<element name="package $0">
		<field name="$0">name</field>
		<helptext>New package.</helptext>
	</element>
	<element name="record $0">
		<field name="$0">name</field>
		<helptext>New record.</helptext>
	</element>
	<element name="connector $0">
		<field name="$0">name</field>
		<helptext>New connector.</helptext>
	</element>
	<element name="type $0">
		<field name="$0">name</field>
		<helptext>New type.</helptext>
	</element>
	<element name="function $0">
		<field name="$0">name</field>
		<helptext>New function.</helptext>
	</element>
	<element name="equation"></element>
	<element name="algorithm"></element>
	<element name="annotation(experiment(StartTime=$0, StopTime=$1, Interval=$2, Tolerance=$3));">
		<field name="$0">0</field>
		<field name="$1">1</field>
		<field name="$2">500</field>
		<field name="$3">1e-6</field>
	</element>
	<element name="else"></element>
	<element name="elseif"></element>
	<element name="true"></element>
	<element name="false"></element>
	<element name="partial"></element>
	<element name="protected"></element>
	<element name="public"></element>
	<element name="return"></element>
	<element name="import $0;">
		<field name="$0">packagename;</field>
		<helptext>Make public definitions in some package available for use by shorted names.</helptext>
	</element>
	<element name="extends $0">
		<field name="$0">BaseClass</field>
		<helptext>Extends existing class (inheritance).</helptext>
	</element>
	<element name="initial equation"></element>
	<element name="initial algorithm"></element>
	<element name="initial()"></element>
	<element name="input"></element>
	<element name="ouput"></element>
	<element name="flow"></element>
	<element name="constant">
		<helptext>Value of variable will be the same for all possible simulations.</helptext>
	</element>
	<element name="parameter">
		<helptext>Variable may change from one simulation to another, but will not change during given simulation.</helptext>
	</element>
	<element name="discrete"></element>
	<element name="connect"></element>
	<element name="noEvent($0)">
		<field name="$0">cond</field>
		<helptext>Suppresses generation of events.</helptext>
	</element>
	<element name="for $0 in $1 loop">
		<field name="$0">element</field>
		<field name="$1">expression</field>
		<helptext>Iterate over elements.</helptext>
	</element>
	<element name="while $0 loop">
		<field name="$0">cond</field>
		<helptext>While-statement.</helptext>
	</element>
</commands>
