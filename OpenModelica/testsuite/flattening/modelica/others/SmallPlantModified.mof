model SmallPlantModified
parameter Real tank3.Y_h = 0.67 "Heterotrophic Yield [g Xbh COD formed/(g COD utilised)]";
parameter Real tank3.Y_a = 0.24 "Autotrophic Yield [g Xba COD formed/(g N utilised)]";
parameter Real tank3.f_p = 0.08 "Fraction of biomass to particulate products [-]";
parameter Real tank3.i_xb = 0.086 "Fraction nitrogen in biomass [g N/(g COD)]";
parameter Real tank3.i_xp = 0.06 "Fraction nitrogen in particulate products [g N/(g COD)]";
parameter Real tank3.mu_h_T = 4.0 "Maximum heterotrophic growth rate at T=15 deg C [day^-1]";
parameter Real tank3.b_h_T = 0.28 "Heterotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank3.mu_a_T = 0.5 "Maximum autotrophic growth rate at T=15 deg C[day^-1]";
parameter Real tank3.b_a_T = 0.1 "Autotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank3.k_a_T = 0.06 "Ammonification rate at T=15 deg C [m3/(g COD day)]";
parameter Real tank3.k_h_T = 1.75 "Maximum specific hydrolysis rate at T=15 deg C [g Xs/(g Xbh COD day)]";
parameter Real tank3.K_x_T = 0.0175 "Half-saturation (hydrolysis) at T=15 deg C [g Xs/(g Xbh COD)]";
parameter Real tank3.K_nh = 1 "Half-saturation (auto. growth) [g NH-N/m3]";
parameter Real tank3.K_s = 20.0 "Half-saturation (hetero. growth) [g COD/m3]";
parameter Real tank3.K_oh = 0.2 "Half-saturation (hetero. oxygen) [g O/m3]";
parameter Real tank3.K_no = 0.5 "Half-saturation (nitrate) [g NO-N/m3]";
parameter Real tank3.K_oa = 0.4 "Half-saturation (auto. oxygen) [g O/m3]";
parameter Real tank3.ny_g = 0.8 "Anoxic growth rate correction factor [-]";
parameter Real tank3.ny_h = 0.4 "Anoxic hydrolysis rate correction factor [-]";
parameter Integer tank3.T.n = 1 "Dimension of signal vector";
parameter Real tank3.V(unit = "m3") = 1333 "Volume of nitrification tank";
parameter Real tank3.alpha = 0.7 "Oxygen transfer factor";
parameter Real tank3.de(unit = "m") = 4.5 "depth of aeration";
parameter Real tank3.R_air = 23.5 "specific oxygen feed factor [gO2/(m^3*m)]";
parameter Real tank2.Y_h = 0.67 "Heterotrophic Yield [g Xbh COD formed/(g COD utilised)]";
parameter Real tank2.Y_a = 0.24 "Autotrophic Yield [g Xba COD formed/(g N utilised)]";
parameter Real tank2.f_p = 0.08 "Fraction of biomass to particulate products [-]";
parameter Real tank2.i_xb = 0.086 "Fraction nitrogen in biomass [g N/(g COD)]";
parameter Real tank2.i_xp = 0.06 "Fraction nitrogen in particulate products [g N/(g COD)]";
parameter Real tank2.mu_h_T = 4.0 "Maximum heterotrophic growth rate at T=15 deg C [day^-1]";
parameter Real tank2.b_h_T = 0.28 "Heterotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank2.mu_a_T = 0.5 "Maximum autotrophic growth rate at T=15 deg C[day^-1]";
parameter Real tank2.b_a_T = 0.1 "Autotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank2.k_a_T = 0.06 "Ammonification rate at T=15 deg C [m3/(g COD day)]";
parameter Real tank2.k_h_T = 1.75 "Maximum specific hydrolysis rate at T=15 deg C [g Xs/(g Xbh COD day)]";
parameter Real tank2.K_x_T = 0.0175 "Half-saturation (hydrolysis) at T=15 deg C [g Xs/(g Xbh COD)]";
parameter Real tank2.K_nh = 1 "Half-saturation (auto. growth) [g NH-N/m3]";
parameter Real tank2.K_s = 20.0 "Half-saturation (hetero. growth) [g COD/m3]";
parameter Real tank2.K_oh = 0.2 "Half-saturation (hetero. oxygen) [g O/m3]";
parameter Real tank2.K_no = 0.5 "Half-saturation (nitrate) [g NO-N/m3]";
parameter Real tank2.K_oa = 0.4 "Half-saturation (auto. oxygen) [g O/m3]";
parameter Real tank2.ny_g = 0.8 "Anoxic growth rate correction factor [-]";
parameter Real tank2.ny_h = 0.4 "Anoxic hydrolysis rate correction factor [-]";
parameter Integer tank2.T.n = 1 "Dimension of signal vector";
parameter Real tank2.V(unit = "m3") = 1333 "Volume of nitrification tank";
parameter Real tank2.alpha = 0.7 "Oxygen transfer factor";
parameter Real tank2.de(unit = "m") = 4.5 "depth of aeration";
parameter Real tank2.R_air = 23.5 "specific oxygen feed factor [gO2/(m^3*m)]";
parameter Real tank1.Y_h = 0.67 "Heterotrophic Yield [g Xbh COD formed/(g COD utilised)]";
parameter Real tank1.Y_a = 0.24 "Autotrophic Yield [g Xba COD formed/(g N utilised)]";
parameter Real tank1.f_p = 0.08 "Fraction of biomass to particulate products [-]";
parameter Real tank1.i_xb = 0.086 "Fraction nitrogen in biomass [g N/(g COD)]";
parameter Real tank1.i_xp = 0.06 "Fraction nitrogen in particulate products [g N/(g COD)]";
parameter Real tank1.mu_h_T = 4.0 "Maximum heterotrophic growth rate at T=15 deg C [day^-1]";
parameter Real tank1.b_h_T = 0.28 "Heterotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank1.mu_a_T = 0.5 "Maximum autotrophic growth rate at T=15 deg C[day^-1]";
parameter Real tank1.b_a_T = 0.1 "Autotrophic decay rate at T=15 deg C [day^-1]";
parameter Real tank1.k_a_T = 0.06 "Ammonification rate at T=15 deg C [m3/(g COD day)]";
parameter Real tank1.k_h_T = 1.75 "Maximum specific hydrolysis rate at T=15 deg C [g Xs/(g Xbh COD day)]";
parameter Real tank1.K_x_T = 0.0175 "Half-saturation (hydrolysis) at T=15 deg C [g Xs/(g Xbh COD)]";
parameter Real tank1.K_nh = 1 "Half-saturation (auto. growth) [g NH-N/m3]";
parameter Real tank1.K_s = 20.0 "Half-saturation (hetero. growth) [g COD/m3]";
parameter Real tank1.K_oh = 0.2 "Half-saturation (hetero. oxygen) [g O/m3]";
parameter Real tank1.K_no = 0.5 "Half-saturation (nitrate) [g NO-N/m3]";
parameter Real tank1.K_oa = 0.4 "Half-saturation (auto. oxygen) [g O/m3]";
parameter Real tank1.ny_g = 0.8 "Anoxic growth rate correction factor [-]";
parameter Real tank1.ny_h = 0.4 "Anoxic hydrolysis rate correction factor [-]";
parameter Integer tank1.T.n = 1 "Dimension of signal vector";
parameter Real tank1.V(unit = "m3") = 3000 "Volume of denitrification tank";
parameter Integer WWSource.data.n = 14 "Dimension of signal vector";
parameter Real blower1.Q_max(unit = "m3/d") = 34574.2654508612 "maximum blower capacity";
parameter Real blower1.Q_min(unit = "m3/d") = 0 "minimum blower capacity";
parameter Integer blower1.u.n = 1 "Dimension of signal vector";
parameter Real blower2.Q_max(unit = "m3/d") = 34574.2654508612 "maximum blower capacity";
parameter Real blower2.Q_min(unit = "m3/d") = 0 "minimum blower capacity";
parameter Integer blower2.u.n = 1 "Dimension of signal vector";
parameter Integer sensor_O2.So.n = 1 "Dimension of signal vector";
parameter Integer Feedback.n = 1 "size of input and feedback signal";
parameter Integer Feedback.inPort1.n = Feedback.n "Dimension of signal vector";
parameter Integer Feedback.inPort2.n = Feedback.n "Dimension of signal vector";
parameter Integer Feedback.outPort.n = Feedback.n "Dimension of signal vector";
parameter Integer PI1.n = max([size(PI1.k, 1); size(PI1.T, 1)]) "Number of inputs (= number of outputs)";
parameter Integer PI1.inPort.n = PI1.n "Dimension of signal vector";
parameter Integer PI1.outPort.n = PI1.n "Dimension of signal vector";
parameter Real PI1.k[:] = {500} "Gain";
parameter Real PI1.T[:](unit = "s") = {0.001} "Time Constant (T>0 required)";
protected 
parameter Real PI1.p_k[PI1.n] = if size(PI1.k, 1) == 1 then PI1.k[1]*ones(PI1.n)
   else PI1.k;
parameter Real PI1.p_T[PI1.n] = if size(PI1.T, 1) == 1 then PI1.T[1]*ones(PI1.n)
   else PI1.T;
public 
parameter Integer Constant1.nout(min = 1.0) = size(Constant1.k, 1) 
  "Number of outputs";
parameter Integer Constant1.outPort.n = Constant1.nout "Dimension of signal vector";
parameter Real Constant1.k[:] = {1} "Constant output values";
parameter Real RecyclePump.Q_min(unit = "m3/d") = 0 "minimum pump capacity";
parameter Real RecyclePump.Q_max(unit = "m3/d") = 46115 "maximum pump capacity";
parameter Integer RecyclePump.u.n = 1 "Dimension of signal vector";
parameter Real ReturnPump.Q_min(unit = "m3/d") = 0 "minimum pump capacity";
parameter Real ReturnPump.Q_max(unit = "m3/d") = 9223 "maximum pump capacity";
parameter Integer ReturnPump.u.n = 1 "Dimension of signal vector";
parameter Real WastePump.Q_min(unit = "m3/d") = 0 "minimum pump capacity";
parameter Real WastePump.Q_max(unit = "m3/d") = 193 "maximum pump capacity";
parameter Integer WastePump.u.n = 1 "Dimension of signal vector";
parameter Integer Constant2.nout(min = 1.0) = size(Constant2.k, 1) 
  "Number of outputs";
parameter Integer Constant2.outPort.n = Constant2.nout "Dimension of signal vector";
parameter Real Constant2.k[:] = {1} "Constant output values";
parameter Integer Temperature.nout(min = 1.0) = size(Temperature.k, 1) 
  "Number of outputs";
parameter Integer Temperature.outPort.n = Temperature.nout "Dimension of signal vector";
parameter Real Temperature.k[:] = {15} "Constant output values";
parameter Integer sensor_NH1.Snh.n = 1 "Dimension of signal vector";
parameter Integer sensor_NO1.Sno.n = 1 "Dimension of signal vector";
parameter Real sensor_TKN1.Y_h = 0.67 "Heterotrophic Yield [g Xbh COD formed/(g COD utilised)]";
parameter Real sensor_TKN1.Y_a = 0.24 "Autotrophic Yield [g Xba COD formed/(g N utilised)]";
parameter Real sensor_TKN1.f_p = 0.08 "Fraction of biomass to particulate products [-]";
parameter Real sensor_TKN1.i_xb = 0.086 "Fraction nitrogen in biomass [g N/(g COD)]";
parameter Real sensor_TKN1.i_xp = 0.06 "Fraction nitrogen in particulate products [g N/(g COD)]";
parameter Integer sensor_TKN1.TKN.n = 2 "Dimension of signal vector";
parameter Integer sensor_COD1.COD.n = 1 "Dimension of signal vector";
parameter Integer OxygenSetpoint.nout(min = 1.0) = max([size(OxygenSetpoint.height,
   1); size(OxygenSetpoint.offset, 1); size(OxygenSetpoint.startTime, 1)]) 
  "Number of outputs";
parameter Integer OxygenSetpoint.outPort.n = OxygenSetpoint.nout 
  "Dimension of signal vector";
parameter Real OxygenSetpoint.offset[:] = {0} "offset of output signal";
parameter Real OxygenSetpoint.startTime[:](unit = "s") = {0} "output = offset for time < startTime";
parameter Real OxygenSetpoint.height[:] = {1.5} "Heights of steps";
protected 
parameter Real OxygenSetpoint.p_height[OxygenSetpoint.nout] = if size(
  OxygenSetpoint.height, 1) == 1 then OxygenSetpoint.height[1]*ones(
  OxygenSetpoint.nout) else OxygenSetpoint.height;
parameter Real OxygenSetpoint.p_offset[OxygenSetpoint.nout] = if size(
  OxygenSetpoint.offset, 1) == 1 then OxygenSetpoint.offset[1]*ones(
  OxygenSetpoint.nout) else OxygenSetpoint.offset;
parameter Real OxygenSetpoint.p_startTime[OxygenSetpoint.nout](unit = "s") = if 
  size(OxygenSetpoint.startTime, 1) == 1 then OxygenSetpoint.startTime[1]*ones(
  OxygenSetpoint.nout) else OxygenSetpoint.startTime;
public 
parameter Real Settler.hsc(unit = "m") = 4.0 "height of secondary clarifier";
parameter Real Settler.Asc(unit = "m2") = 1500.0 "area of secondary clarifier";
parameter Real Settler.ISV(unit = "ml/g") = 130 "Sludge Volume Index";
parameter Integer sensor_TSS1.TSS.n = 1 "Dimension of signal vector";
parameter Integer Constant3.nout(min = 1.0) = size(Constant3.k, 1) 
  "Number of outputs";
parameter Integer Constant3.outPort.n = Constant3.nout "Dimension of signal vector";
parameter Real Constant3.k[:] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} 
  "Constant output values";

Real Effluent.In.Q(unit = "m3/d");
Real Effluent.In.Si(unit = "mg/l", min = 0.0);
Real Effluent.In.Ss(unit = "mg/l", min = 0.0);
Real Effluent.In.Xi(unit = "mg/l", min = 0.0);
Real Effluent.In.Xs(unit = "mg/l", min = 0.0);
Real Effluent.In.Xbh(unit = "mg/l", min = 0.0);
Real Effluent.In.Xba(unit = "mg/l", min = 0.0);
Real Effluent.In.Xp(unit = "mg/l", min = 0.0);
Real Effluent.In.So(unit = "mg/l", min = 0.0);
Real Effluent.In.Sno(unit = "mg/l", min = 0.0);
Real Effluent.In.Snh(unit = "mg/l", min = 0.0);
Real Effluent.In.Snd(unit = "mg/l", min = 0.0);
Real Effluent.In.Xnd(unit = "mg/l", min = 0.0);
Real Effluent.In.Salk(unit = "mmol/l", min = 0.0);
Real WasteSludge.In.Q(unit = "m3/d");
Real WasteSludge.In.Si(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Ss(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xi(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xs(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xbh(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xba(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xp(unit = "mg/l", min = 0.0);
Real WasteSludge.In.So(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Sno(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Snh(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Snd(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Xnd(unit = "mg/l", min = 0.0);
Real WasteSludge.In.Salk(unit = "mmol/l", min = 0.0);
Real divider.In.Q(unit = "m3/d");
Real divider.In.Si(unit = "mg/l", min = 0.0);
Real divider.In.Ss(unit = "mg/l", min = 0.0);
Real divider.In.Xi(unit = "mg/l", min = 0.0);
Real divider.In.Xs(unit = "mg/l", min = 0.0);
Real divider.In.Xbh(unit = "mg/l", min = 0.0);
Real divider.In.Xba(unit = "mg/l", min = 0.0);
Real divider.In.Xp(unit = "mg/l", min = 0.0);
Real divider.In.So(unit = "mg/l", min = 0.0);
Real divider.In.Sno(unit = "mg/l", min = 0.0);
Real divider.In.Snh(unit = "mg/l", min = 0.0);
Real divider.In.Snd(unit = "mg/l", min = 0.0);
Real divider.In.Xnd(unit = "mg/l", min = 0.0);
Real divider.In.Salk(unit = "mmol/l", min = 0.0);
Real divider.Out1.Q(unit = "m3/d");
Real divider.Out1.Si(unit = "mg/l", min = 0.0);
Real divider.Out1.Ss(unit = "mg/l", min = 0.0);
Real divider.Out1.Xi(unit = "mg/l", min = 0.0);
Real divider.Out1.Xs(unit = "mg/l", min = 0.0);
Real divider.Out1.Xbh(unit = "mg/l", min = 0.0);
Real divider.Out1.Xba(unit = "mg/l", min = 0.0);
Real divider.Out1.Xp(unit = "mg/l", min = 0.0);
Real divider.Out1.So(unit = "mg/l", min = 0.0);
Real divider.Out1.Sno(unit = "mg/l", min = 0.0);
Real divider.Out1.Snh(unit = "mg/l", min = 0.0);
Real divider.Out1.Snd(unit = "mg/l", min = 0.0);
Real divider.Out1.Xnd(unit = "mg/l", min = 0.0);
Real divider.Out1.Salk(unit = "mmol/l", min = 0.0);
Real divider.Out2.Q(unit = "m3/d");
Real divider.Out2.Si(unit = "mg/l", min = 0.0);
Real divider.Out2.Ss(unit = "mg/l", min = 0.0);
Real divider.Out2.Xi(unit = "mg/l", min = 0.0);
Real divider.Out2.Xs(unit = "mg/l", min = 0.0);
Real divider.Out2.Xbh(unit = "mg/l", min = 0.0);
Real divider.Out2.Xba(unit = "mg/l", min = 0.0);
Real divider.Out2.Xp(unit = "mg/l", min = 0.0);
Real divider.Out2.So(unit = "mg/l", min = 0.0);
Real divider.Out2.Sno(unit = "mg/l", min = 0.0);
Real divider.Out2.Snh(unit = "mg/l", min = 0.0);
Real divider.Out2.Snd(unit = "mg/l", min = 0.0);
Real divider.Out2.Xnd(unit = "mg/l", min = 0.0);
Real divider.Out2.Salk(unit = "mmol/l", min = 0.0);
Real tank3.mu_h "Maximum heterotrophic growth rate f(T) [day^-1]";
Real tank3.b_h "Heterotrophic decay rate f(T) [day^-1]";
Real tank3.mu_a "Maximum autotrophic growth rate f(T) [day^-1]";
Real tank3.b_a "Autotrophic decay rate f(T) [day^-1]";
Real tank3.k_a "Ammonification rate f(T) [m3/(g COD day)]";
Real tank3.k_h "Maximum specific hydrolysis rate f(T) [g Xs/(g Xbh COD day)]";
Real tank3.K_x "Half-saturation (hydrolysis) f(T) [g Xs/(g Xbh COD)]";
Real tank3.Si(unit = "mg/l", min = 0.0) "Soluble inert organic matter";
Real tank3.Ss(unit = "mg/l", min = 0.0) "Readily biodegradable substrate";
Real tank3.Xi(unit = "mg/l", min = 0.0) "Particulate inert organic matter";
Real tank3.Xs(unit = "mg/l", min = 0.0) "Slowly biodegradable substrate";
Real tank3.Xbh(unit = "mg/l", min = 0.0) "Active heterotrophic biomass";
Real tank3.Xba(unit = "mg/l", min = 0.0) "Active autotrophic biomass";
Real tank3.Xp(unit = "mg/l", min = 0.0) "Particulate products from biomass decay";
Real tank3.So(unit = "mg/l", min = 0.0) "Dissolved oxygen";
Real tank3.Sno(unit = "mg/l", min = 0.0) "Nitrate and nitrite nitrogen";
Real tank3.Snh(unit = "mg/l", min = 0.0) "Ammonium nitrogen";
Real tank3.Snd(unit = "mg/l", min = 0.0) "Soluble biodegradable organic nitrogen";
Real tank3.Xnd(unit = "mg/l", min = 0.0) "Particulate biodegradable organic nitrogen";
Real tank3.Salk(unit = "mmol/l", min = 0.0) "Alkalinity";
Real tank3.p1;
Real tank3.p2;
Real tank3.p3;
Real tank3.p4;
Real tank3.p5;
Real tank3.p6;
Real tank3.p7;
Real tank3.p8;
Real tank3.r1;
Real tank3.r2;
Real tank3.r3;
Real tank3.r4;
Real tank3.r5;
Real tank3.r6;
Real tank3.r7;
Real tank3.r8;
Real tank3.r9;
Real tank3.r10;
Real tank3.r11;
Real tank3.r12;
Real tank3.r13;
Real tank3.inputSi;
Real tank3.inputSs;
Real tank3.inputXi;
Real tank3.inputXs;
Real tank3.inputXbh;
Real tank3.inputXba;
Real tank3.inputXp;
Real tank3.inputSo;
Real tank3.inputSno;
Real tank3.inputSnh;
Real tank3.inputSnd;
Real tank3.inputXnd;
Real tank3.inputSalk;
Real tank3.aeration;
Real tank3.In.Q(unit = "m3/d");
Real tank3.In.Si(unit = "mg/l", min = 0.0);
Real tank3.In.Ss(unit = "mg/l", min = 0.0);
Real tank3.In.Xi(unit = "mg/l", min = 0.0);
Real tank3.In.Xs(unit = "mg/l", min = 0.0);
Real tank3.In.Xbh(unit = "mg/l", min = 0.0);
Real tank3.In.Xba(unit = "mg/l", min = 0.0);
Real tank3.In.Xp(unit = "mg/l", min = 0.0);
Real tank3.In.So(unit = "mg/l", min = 0.0);
Real tank3.In.Sno(unit = "mg/l", min = 0.0);
Real tank3.In.Snh(unit = "mg/l", min = 0.0);
Real tank3.In.Snd(unit = "mg/l", min = 0.0);
Real tank3.In.Xnd(unit = "mg/l", min = 0.0);
Real tank3.In.Salk(unit = "mmol/l", min = 0.0);
Real tank3.Out.Q(unit = "m3/d");
Real tank3.Out.Si(unit = "mg/l", min = 0.0);
Real tank3.Out.Ss(unit = "mg/l", min = 0.0);
Real tank3.Out.Xi(unit = "mg/l", min = 0.0);
Real tank3.Out.Xs(unit = "mg/l", min = 0.0);
Real tank3.Out.Xbh(unit = "mg/l", min = 0.0);
Real tank3.Out.Xba(unit = "mg/l", min = 0.0);
Real tank3.Out.Xp(unit = "mg/l", min = 0.0);
Real tank3.Out.So(unit = "mg/l", min = 0.0);
Real tank3.Out.Sno(unit = "mg/l", min = 0.0);
Real tank3.Out.Snh(unit = "mg/l", min = 0.0);
Real tank3.Out.Snd(unit = "mg/l", min = 0.0);
Real tank3.Out.Xnd(unit = "mg/l", min = 0.0);
Real tank3.Out.Salk(unit = "mmol/l", min = 0.0);
Real tank3.MeasurePort.Q(unit = "m3/d");
Real tank3.MeasurePort.Si(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Ss(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xi(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xs(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xbh(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xba(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xp(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.So(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Sno(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Snh(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Snd(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Xnd(unit = "mg/l", min = 0.0);
Real tank3.MeasurePort.Salk(unit = "mmol/l", min = 0.0);
Real tank3.T.signal[tank3.T.n] "Real input signals";
Real tank3.So_sat(unit = "mg/l", min = 0.0) "Dissolved oxygen saturation";
Real tank3.AirIn.Q_air(unit = "m3/d");
Real tank2.mu_h "Maximum heterotrophic growth rate f(T) [day^-1]";
Real tank2.b_h "Heterotrophic decay rate f(T) [day^-1]";
Real tank2.mu_a "Maximum autotrophic growth rate f(T) [day^-1]";
Real tank2.b_a "Autotrophic decay rate f(T) [day^-1]";
Real tank2.k_a "Ammonification rate f(T) [m3/(g COD day)]";
Real tank2.k_h "Maximum specific hydrolysis rate f(T) [g Xs/(g Xbh COD day)]";
Real tank2.K_x "Half-saturation (hydrolysis) f(T) [g Xs/(g Xbh COD)]";
Real tank2.Si(unit = "mg/l", min = 0.0) "Soluble inert organic matter";
Real tank2.Ss(unit = "mg/l", min = 0.0) "Readily biodegradable substrate";
Real tank2.Xi(unit = "mg/l", min = 0.0) "Particulate inert organic matter";
Real tank2.Xs(unit = "mg/l", min = 0.0) "Slowly biodegradable substrate";
Real tank2.Xbh(unit = "mg/l", min = 0.0) "Active heterotrophic biomass";
Real tank2.Xba(unit = "mg/l", min = 0.0) "Active autotrophic biomass";
Real tank2.Xp(unit = "mg/l", min = 0.0) "Particulate products from biomass decay";
Real tank2.So(unit = "mg/l", min = 0.0) "Dissolved oxygen";
Real tank2.Sno(unit = "mg/l", min = 0.0) "Nitrate and nitrite nitrogen";
Real tank2.Snh(unit = "mg/l", min = 0.0) "Ammonium nitrogen";
Real tank2.Snd(unit = "mg/l", min = 0.0) "Soluble biodegradable organic nitrogen";
Real tank2.Xnd(unit = "mg/l", min = 0.0) "Particulate biodegradable organic nitrogen";
Real tank2.Salk(unit = "mmol/l", min = 0.0) "Alkalinity";
Real tank2.p1;
Real tank2.p2;
Real tank2.p3;
Real tank2.p4;
Real tank2.p5;
Real tank2.p6;
Real tank2.p7;
Real tank2.p8;
Real tank2.r1;
Real tank2.r2;
Real tank2.r3;
Real tank2.r4;
Real tank2.r5;
Real tank2.r6;
Real tank2.r7;
Real tank2.r8;
Real tank2.r9;
Real tank2.r10;
Real tank2.r11;
Real tank2.r12;
Real tank2.r13;
Real tank2.inputSi;
Real tank2.inputSs;
Real tank2.inputXi;
Real tank2.inputXs;
Real tank2.inputXbh;
Real tank2.inputXba;
Real tank2.inputXp;
Real tank2.inputSo;
Real tank2.inputSno;
Real tank2.inputSnh;
Real tank2.inputSnd;
Real tank2.inputXnd;
Real tank2.inputSalk;
Real tank2.aeration;
Real tank2.In.Q(unit = "m3/d");
Real tank2.In.Si(unit = "mg/l", min = 0.0);
Real tank2.In.Ss(unit = "mg/l", min = 0.0);
Real tank2.In.Xi(unit = "mg/l", min = 0.0);
Real tank2.In.Xs(unit = "mg/l", min = 0.0);
Real tank2.In.Xbh(unit = "mg/l", min = 0.0);
Real tank2.In.Xba(unit = "mg/l", min = 0.0);
Real tank2.In.Xp(unit = "mg/l", min = 0.0);
Real tank2.In.So(unit = "mg/l", min = 0.0);
Real tank2.In.Sno(unit = "mg/l", min = 0.0);
Real tank2.In.Snh(unit = "mg/l", min = 0.0);
Real tank2.In.Snd(unit = "mg/l", min = 0.0);
Real tank2.In.Xnd(unit = "mg/l", min = 0.0);
Real tank2.In.Salk(unit = "mmol/l", min = 0.0);
Real tank2.Out.Q(unit = "m3/d");
Real tank2.Out.Si(unit = "mg/l", min = 0.0);
Real tank2.Out.Ss(unit = "mg/l", min = 0.0);
Real tank2.Out.Xi(unit = "mg/l", min = 0.0);
Real tank2.Out.Xs(unit = "mg/l", min = 0.0);
Real tank2.Out.Xbh(unit = "mg/l", min = 0.0);
Real tank2.Out.Xba(unit = "mg/l", min = 0.0);
Real tank2.Out.Xp(unit = "mg/l", min = 0.0);
Real tank2.Out.So(unit = "mg/l", min = 0.0);
Real tank2.Out.Sno(unit = "mg/l", min = 0.0);
Real tank2.Out.Snh(unit = "mg/l", min = 0.0);
Real tank2.Out.Snd(unit = "mg/l", min = 0.0);
Real tank2.Out.Xnd(unit = "mg/l", min = 0.0);
Real tank2.Out.Salk(unit = "mmol/l", min = 0.0);
Real tank2.MeasurePort.Q(unit = "m3/d");
Real tank2.MeasurePort.Si(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Ss(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xi(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xs(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xbh(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xba(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xp(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.So(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Sno(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Snh(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Snd(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Xnd(unit = "mg/l", min = 0.0);
Real tank2.MeasurePort.Salk(unit = "mmol/l", min = 0.0);
Real tank2.T.signal[tank2.T.n] "Real input signals";
Real tank2.So_sat(unit = "mg/l", min = 0.0) "Dissolved oxygen saturation";
Real tank2.AirIn.Q_air(unit = "m3/d");
Real tank1.mu_h "Maximum heterotrophic growth rate f(T) [day^-1]";
Real tank1.b_h "Heterotrophic decay rate f(T) [day^-1]";
Real tank1.mu_a "Maximum autotrophic growth rate f(T) [day^-1]";
Real tank1.b_a "Autotrophic decay rate f(T) [day^-1]";
Real tank1.k_a "Ammonification rate f(T) [m3/(g COD day)]";
Real tank1.k_h "Maximum specific hydrolysis rate f(T) [g Xs/(g Xbh COD day)]";
Real tank1.K_x "Half-saturation (hydrolysis) f(T) [g Xs/(g Xbh COD)]";
Real tank1.Si(unit = "mg/l", min = 0.0) "Soluble inert organic matter";
Real tank1.Ss(unit = "mg/l", min = 0.0) "Readily biodegradable substrate";
Real tank1.Xi(unit = "mg/l", min = 0.0) "Particulate inert organic matter";
Real tank1.Xs(unit = "mg/l", min = 0.0) "Slowly biodegradable substrate";
Real tank1.Xbh(unit = "mg/l", min = 0.0) "Active heterotrophic biomass";
Real tank1.Xba(unit = "mg/l", min = 0.0) "Active autotrophic biomass";
Real tank1.Xp(unit = "mg/l", min = 0.0) "Particulate products from biomass decay";
Real tank1.So(unit = "mg/l", min = 0.0) "Dissolved oxygen";
Real tank1.Sno(unit = "mg/l", min = 0.0) "Nitrate and nitrite nitrogen";
Real tank1.Snh(unit = "mg/l", min = 0.0) "Ammonium nitrogen";
Real tank1.Snd(unit = "mg/l", min = 0.0) "Soluble biodegradable organic nitrogen";
Real tank1.Xnd(unit = "mg/l", min = 0.0) "Particulate biodegradable organic nitrogen";
Real tank1.Salk(unit = "mmol/l", min = 0.0) "Alkalinity";
Real tank1.p1;
Real tank1.p2;
Real tank1.p3;
Real tank1.p4;
Real tank1.p5;
Real tank1.p6;
Real tank1.p7;
Real tank1.p8;
Real tank1.r1;
Real tank1.r2;
Real tank1.r3;
Real tank1.r4;
Real tank1.r5;
Real tank1.r6;
Real tank1.r7;
Real tank1.r8;
Real tank1.r9;
Real tank1.r10;
Real tank1.r11;
Real tank1.r12;
Real tank1.r13;
Real tank1.inputSi;
Real tank1.inputSs;
Real tank1.inputXi;
Real tank1.inputXs;
Real tank1.inputXbh;
Real tank1.inputXba;
Real tank1.inputXp;
Real tank1.inputSo;
Real tank1.inputSno;
Real tank1.inputSnh;
Real tank1.inputSnd;
Real tank1.inputXnd;
Real tank1.inputSalk;
Real tank1.aeration;
Real tank1.In.Q(unit = "m3/d");
Real tank1.In.Si(unit = "mg/l", min = 0.0);
Real tank1.In.Ss(unit = "mg/l", min = 0.0);
Real tank1.In.Xi(unit = "mg/l", min = 0.0);
Real tank1.In.Xs(unit = "mg/l", min = 0.0);
Real tank1.In.Xbh(unit = "mg/l", min = 0.0);
Real tank1.In.Xba(unit = "mg/l", min = 0.0);
Real tank1.In.Xp(unit = "mg/l", min = 0.0);
Real tank1.In.So(unit = "mg/l", min = 0.0);
Real tank1.In.Sno(unit = "mg/l", min = 0.0);
Real tank1.In.Snh(unit = "mg/l", min = 0.0);
Real tank1.In.Snd(unit = "mg/l", min = 0.0);
Real tank1.In.Xnd(unit = "mg/l", min = 0.0);
Real tank1.In.Salk(unit = "mmol/l", min = 0.0);
Real tank1.Out.Q(unit = "m3/d");
Real tank1.Out.Si(unit = "mg/l", min = 0.0);
Real tank1.Out.Ss(unit = "mg/l", min = 0.0);
Real tank1.Out.Xi(unit = "mg/l", min = 0.0);
Real tank1.Out.Xs(unit = "mg/l", min = 0.0);
Real tank1.Out.Xbh(unit = "mg/l", min = 0.0);
Real tank1.Out.Xba(unit = "mg/l", min = 0.0);
Real tank1.Out.Xp(unit = "mg/l", min = 0.0);
Real tank1.Out.So(unit = "mg/l", min = 0.0);
Real tank1.Out.Sno(unit = "mg/l", min = 0.0);
Real tank1.Out.Snh(unit = "mg/l", min = 0.0);
Real tank1.Out.Snd(unit = "mg/l", min = 0.0);
Real tank1.Out.Xnd(unit = "mg/l", min = 0.0);
Real tank1.Out.Salk(unit = "mmol/l", min = 0.0);
Real tank1.MeasurePort.Q(unit = "m3/d");
Real tank1.MeasurePort.Si(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Ss(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xi(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xs(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xbh(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xba(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xp(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.So(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Sno(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Snh(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Snd(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Xnd(unit = "mg/l", min = 0.0);
Real tank1.MeasurePort.Salk(unit = "mmol/l", min = 0.0);
Real tank1.T.signal[tank1.T.n] "Real input signals";
Real mixer.In1.Q(unit = "m3/d");
Real mixer.In1.Si(unit = "mg/l", min = 0.0);
Real mixer.In1.Ss(unit = "mg/l", min = 0.0);
Real mixer.In1.Xi(unit = "mg/l", min = 0.0);
Real mixer.In1.Xs(unit = "mg/l", min = 0.0);
Real mixer.In1.Xbh(unit = "mg/l", min = 0.0);
Real mixer.In1.Xba(unit = "mg/l", min = 0.0);
Real mixer.In1.Xp(unit = "mg/l", min = 0.0);
Real mixer.In1.So(unit = "mg/l", min = 0.0);
Real mixer.In1.Sno(unit = "mg/l", min = 0.0);
Real mixer.In1.Snh(unit = "mg/l", min = 0.0);
Real mixer.In1.Snd(unit = "mg/l", min = 0.0);
Real mixer.In1.Xnd(unit = "mg/l", min = 0.0);
Real mixer.In1.Salk(unit = "mmol/l", min = 0.0);
Real mixer.In2.Q(unit = "m3/d");
Real mixer.In2.Si(unit = "mg/l", min = 0.0);
Real mixer.In2.Ss(unit = "mg/l", min = 0.0);
Real mixer.In2.Xi(unit = "mg/l", min = 0.0);
Real mixer.In2.Xs(unit = "mg/l", min = 0.0);
Real mixer.In2.Xbh(unit = "mg/l", min = 0.0);
Real mixer.In2.Xba(unit = "mg/l", min = 0.0);
Real mixer.In2.Xp(unit = "mg/l", min = 0.0);
Real mixer.In2.So(unit = "mg/l", min = 0.0);
Real mixer.In2.Sno(unit = "mg/l", min = 0.0);
Real mixer.In2.Snh(unit = "mg/l", min = 0.0);
Real mixer.In2.Snd(unit = "mg/l", min = 0.0);
Real mixer.In2.Xnd(unit = "mg/l", min = 0.0);
Real mixer.In2.Salk(unit = "mmol/l", min = 0.0);
Real mixer.In3.Q(unit = "m3/d");
Real mixer.In3.Si(unit = "mg/l", min = 0.0);
Real mixer.In3.Ss(unit = "mg/l", min = 0.0);
Real mixer.In3.Xi(unit = "mg/l", min = 0.0);
Real mixer.In3.Xs(unit = "mg/l", min = 0.0);
Real mixer.In3.Xbh(unit = "mg/l", min = 0.0);
Real mixer.In3.Xba(unit = "mg/l", min = 0.0);
Real mixer.In3.Xp(unit = "mg/l", min = 0.0);
Real mixer.In3.So(unit = "mg/l", min = 0.0);
Real mixer.In3.Sno(unit = "mg/l", min = 0.0);
Real mixer.In3.Snh(unit = "mg/l", min = 0.0);
Real mixer.In3.Snd(unit = "mg/l", min = 0.0);
Real mixer.In3.Xnd(unit = "mg/l", min = 0.0);
Real mixer.In3.Salk(unit = "mmol/l", min = 0.0);
Real mixer.Out.Q(unit = "m3/d");
Real mixer.Out.Si(unit = "mg/l", min = 0.0);
Real mixer.Out.Ss(unit = "mg/l", min = 0.0);
Real mixer.Out.Xi(unit = "mg/l", min = 0.0);
Real mixer.Out.Xs(unit = "mg/l", min = 0.0);
Real mixer.Out.Xbh(unit = "mg/l", min = 0.0);
Real mixer.Out.Xba(unit = "mg/l", min = 0.0);
Real mixer.Out.Xp(unit = "mg/l", min = 0.0);
Real mixer.Out.So(unit = "mg/l", min = 0.0);
Real mixer.Out.Sno(unit = "mg/l", min = 0.0);
Real mixer.Out.Snh(unit = "mg/l", min = 0.0);
Real mixer.Out.Snd(unit = "mg/l", min = 0.0);
Real mixer.Out.Xnd(unit = "mg/l", min = 0.0);
Real mixer.Out.Salk(unit = "mmol/l", min = 0.0);
Real WWSource.Out.Q(unit = "m3/d");
Real WWSource.Out.Si(unit = "mg/l", min = 0.0);
Real WWSource.Out.Ss(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xi(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xs(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xbh(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xba(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xp(unit = "mg/l", min = 0.0);
Real WWSource.Out.So(unit = "mg/l", min = 0.0);
Real WWSource.Out.Sno(unit = "mg/l", min = 0.0);
Real WWSource.Out.Snh(unit = "mg/l", min = 0.0);
Real WWSource.Out.Snd(unit = "mg/l", min = 0.0);
Real WWSource.Out.Xnd(unit = "mg/l", min = 0.0);
Real WWSource.Out.Salk(unit = "mmol/l", min = 0.0);
Real WWSource.data.signal[WWSource.data.n] "Real input signals";
Real blower1.H;
Real blower1.AirOut.Q_air(unit = "m3/d");
Real blower1.u.signal[blower1.u.n] "Real input signals";
Real blower2.H;
Real blower2.AirOut.Q_air(unit = "m3/d");
Real blower2.u.signal[blower2.u.n] "Real input signals";
Real sensor_O2.In.Q(unit = "m3/d");
Real sensor_O2.In.Si(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_O2.In.So(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_O2.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_O2.So.signal[sensor_O2.So.n] "Real output signals";
Real Feedback.inPort1.signal[Feedback.inPort1.n] "Real input signals";
Real Feedback.inPort2.signal[Feedback.inPort2.n] "Real input signals";
Real Feedback.outPort.signal[Feedback.outPort.n] "Real output signals";
Real PI1.inPort.signal[PI1.inPort.n] "Real input signals";
Real PI1.outPort.signal[PI1.outPort.n] "Real output signals";
Real PI1.y[PI1.n] "Output signals";
protected 
Real PI1.u[:] = PI1.inPort.signal "Input signals";
public 
Real PI1.x[PI1.n] "State of block";
Real Constant1.outPort.signal[Constant1.outPort.n] "Real output signals";
Real Constant1.y[Constant1.nout];
Real RecyclePump.H;
Real RecyclePump.In.Q(unit = "m3/d");
Real RecyclePump.In.Si(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Ss(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xi(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xs(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xbh(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xba(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xp(unit = "mg/l", min = 0.0);
Real RecyclePump.In.So(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Sno(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Snh(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Snd(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Xnd(unit = "mg/l", min = 0.0);
Real RecyclePump.In.Salk(unit = "mmol/l", min = 0.0);
Real RecyclePump.Out.Q(unit = "m3/d");
Real RecyclePump.Out.Si(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Ss(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xi(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xs(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xbh(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xba(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xp(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.So(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Sno(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Snh(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Snd(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Xnd(unit = "mg/l", min = 0.0);
Real RecyclePump.Out.Salk(unit = "mmol/l", min = 0.0);
Real RecyclePump.u.signal[RecyclePump.u.n] "Real input signals";
Real ReturnPump.H;
Real ReturnPump.In.Q(unit = "m3/d");
Real ReturnPump.In.Si(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Ss(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xi(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xs(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xbh(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xba(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xp(unit = "mg/l", min = 0.0);
Real ReturnPump.In.So(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Sno(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Snh(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Snd(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Xnd(unit = "mg/l", min = 0.0);
Real ReturnPump.In.Salk(unit = "mmol/l", min = 0.0);
Real ReturnPump.Out.Q(unit = "m3/d");
Real ReturnPump.Out.Si(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Ss(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xi(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xs(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xbh(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xba(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xp(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.So(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Sno(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Snh(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Snd(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Xnd(unit = "mg/l", min = 0.0);
Real ReturnPump.Out.Salk(unit = "mmol/l", min = 0.0);
Real ReturnPump.u.signal[ReturnPump.u.n] "Real input signals";
Real WastePump.H;
Real WastePump.In.Q(unit = "m3/d");
Real WastePump.In.Si(unit = "mg/l", min = 0.0);
Real WastePump.In.Ss(unit = "mg/l", min = 0.0);
Real WastePump.In.Xi(unit = "mg/l", min = 0.0);
Real WastePump.In.Xs(unit = "mg/l", min = 0.0);
Real WastePump.In.Xbh(unit = "mg/l", min = 0.0);
Real WastePump.In.Xba(unit = "mg/l", min = 0.0);
Real WastePump.In.Xp(unit = "mg/l", min = 0.0);
Real WastePump.In.So(unit = "mg/l", min = 0.0);
Real WastePump.In.Sno(unit = "mg/l", min = 0.0);
Real WastePump.In.Snh(unit = "mg/l", min = 0.0);
Real WastePump.In.Snd(unit = "mg/l", min = 0.0);
Real WastePump.In.Xnd(unit = "mg/l", min = 0.0);
Real WastePump.In.Salk(unit = "mmol/l", min = 0.0);
Real WastePump.Out.Q(unit = "m3/d");
Real WastePump.Out.Si(unit = "mg/l", min = 0.0);
Real WastePump.Out.Ss(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xi(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xs(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xbh(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xba(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xp(unit = "mg/l", min = 0.0);
Real WastePump.Out.So(unit = "mg/l", min = 0.0);
Real WastePump.Out.Sno(unit = "mg/l", min = 0.0);
Real WastePump.Out.Snh(unit = "mg/l", min = 0.0);
Real WastePump.Out.Snd(unit = "mg/l", min = 0.0);
Real WastePump.Out.Xnd(unit = "mg/l", min = 0.0);
Real WastePump.Out.Salk(unit = "mmol/l", min = 0.0);
Real WastePump.u.signal[WastePump.u.n] "Real input signals";
Real Constant2.outPort.signal[Constant2.outPort.n] "Real output signals";
Real Constant2.y[Constant2.nout];
Real Temperature.outPort.signal[Temperature.outPort.n] "Real output signals";
Real Temperature.y[Temperature.nout];
Real sensor_NH1.In.Q(unit = "m3/d");
Real sensor_NH1.In.Si(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.So(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_NH1.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_NH1.Snh.signal[sensor_NH1.Snh.n] "Real output signals";
Real sensor_NO1.In.Q(unit = "m3/d");
Real sensor_NO1.In.Si(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.So(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_NO1.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_NO1.Sno.signal[sensor_NO1.Sno.n] "Real output signals";
Real sensor_TKN1.In.Q(unit = "m3/d");
Real sensor_TKN1.In.Si(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.So(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_TKN1.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_TKN1.TKN.signal[sensor_TKN1.TKN.n] "Real output signals";
Real sensor_COD1.In.Q(unit = "m3/d");
Real sensor_COD1.In.Si(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.So(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_COD1.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_COD1.COD.signal[sensor_COD1.COD.n] "Real output signals";
Real OxygenSetpoint.outPort.signal[OxygenSetpoint.outPort.n] "Real output signals";
Real OxygenSetpoint.y[OxygenSetpoint.nout];
Real Settler.Xf(unit = "mg/l", min = 0.0) "total sludge concentration";
Real Settler.XB(unit = "mg/l", min = 0.0) "sludge concentration in sludge layer";
Real Settler.XR(unit = "mg/l", min = 0.0) "sludge concentration of return";
Real Settler.Si1(unit = "mg/l", min = 0.0) "Soluble inert organic matter in first stirrer tank of the excess layer";
Real Settler.Ss1(unit = "mg/l", min = 0.0) "Readily biodegradable substrate in first stirrer tank of the excess layer";
Real Settler.So1(unit = "mg/l", min = 0.0) "Dissolved oxygen in first stirrer tank of the excess layer";
Real Settler.Sno1(unit = "mg/l", min = 0.0) "Nitrate and nitrite nitrogen in first stirrer tank of the excess layer";
Real Settler.Snh1(unit = "mg/l", min = 0.0) "Ammonium nitrogen in first stirrer tank of the excess layer";
Real Settler.Snd1(unit = "mg/l", min = 0.0) "Soluble biodegradable organic nitrogen in first stirrer tank of the excess layer";
Real Settler.Salk1(unit = "mmol/l", min = 0.0) "Alkalinity in first stirrer tank of the excess layer";
Real Settler.Si2(unit = "mg/l", min = 0.0) "Soluble inert organic matter in second stirrer tank of the excess layer";
Real Settler.Ss2(unit = "mg/l", min = 0.0) "Readily biodegradable substrate in second stirrer tank of the excess layer";
Real Settler.So2(unit = "mg/l", min = 0.0) "Dissolved oxygen in second stirrer tank of the excess layer";
Real Settler.Sno2(unit = "mg/l", min = 0.0) "Nitrate and nitrite nitrogen in second stirrer tank of the excess layer";
Real Settler.Snh2(unit = "mg/l", min = 0.0) "Ammonium nitrogen in second stirrer tank of the excess layer";
Real Settler.Snd2(unit = "mg/l", min = 0.0) "Soluble biodegradable organic nitrogen in second stirrer tank of the excess layer";
Real Settler.Salk2(unit = "mmol/l", min = 0.0) "Alkalinity in second stirrer tank of the excess layer";
Real Settler.rXi;
Real Settler.rXs;
Real Settler.rXbh;
Real Settler.rXba;
Real Settler.rXp;
Real Settler.rXnd;
Real Settler.te "thickening time in sludge layer in [d]";
Real Settler.hs(unit = "m") "height of sludge layer";
Real Settler.he(unit = "m") "height of excess layer";
Real Settler.Feed.Q(unit = "m3/d");
Real Settler.Feed.Si(unit = "mg/l", min = 0.0);
Real Settler.Feed.Ss(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xi(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xs(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xbh(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xba(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xp(unit = "mg/l", min = 0.0);
Real Settler.Feed.So(unit = "mg/l", min = 0.0);
Real Settler.Feed.Sno(unit = "mg/l", min = 0.0);
Real Settler.Feed.Snh(unit = "mg/l", min = 0.0);
Real Settler.Feed.Snd(unit = "mg/l", min = 0.0);
Real Settler.Feed.Xnd(unit = "mg/l", min = 0.0);
Real Settler.Feed.Salk(unit = "mmol/l", min = 0.0);
Real Settler.Effluent.Q(unit = "m3/d");
Real Settler.Effluent.Si(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Ss(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xi(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xs(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xbh(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xba(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xp(unit = "mg/l", min = 0.0);
Real Settler.Effluent.So(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Sno(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Snh(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Snd(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Xnd(unit = "mg/l", min = 0.0);
Real Settler.Effluent.Salk(unit = "mmol/l", min = 0.0);
Real Settler.Return.Q(unit = "m3/d");
Real Settler.Return.Si(unit = "mg/l", min = 0.0);
Real Settler.Return.Ss(unit = "mg/l", min = 0.0);
Real Settler.Return.Xi(unit = "mg/l", min = 0.0);
Real Settler.Return.Xs(unit = "mg/l", min = 0.0);
Real Settler.Return.Xbh(unit = "mg/l", min = 0.0);
Real Settler.Return.Xba(unit = "mg/l", min = 0.0);
Real Settler.Return.Xp(unit = "mg/l", min = 0.0);
Real Settler.Return.So(unit = "mg/l", min = 0.0);
Real Settler.Return.Sno(unit = "mg/l", min = 0.0);
Real Settler.Return.Snh(unit = "mg/l", min = 0.0);
Real Settler.Return.Snd(unit = "mg/l", min = 0.0);
Real Settler.Return.Xnd(unit = "mg/l", min = 0.0);
Real Settler.Return.Salk(unit = "mmol/l", min = 0.0);
Real Settler.Waste.Q(unit = "m3/d");
Real Settler.Waste.Si(unit = "mg/l", min = 0.0);
Real Settler.Waste.Ss(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xi(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xs(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xbh(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xba(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xp(unit = "mg/l", min = 0.0);
Real Settler.Waste.So(unit = "mg/l", min = 0.0);
Real Settler.Waste.Sno(unit = "mg/l", min = 0.0);
Real Settler.Waste.Snh(unit = "mg/l", min = 0.0);
Real Settler.Waste.Snd(unit = "mg/l", min = 0.0);
Real Settler.Waste.Xnd(unit = "mg/l", min = 0.0);
Real Settler.Waste.Salk(unit = "mmol/l", min = 0.0);
Real sensor_TSS1.In.Q(unit = "m3/d");
Real sensor_TSS1.In.Si(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Ss(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xi(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xs(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xbh(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xba(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xp(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.So(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Sno(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Snh(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Snd(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Xnd(unit = "mg/l", min = 0.0);
Real sensor_TSS1.In.Salk(unit = "mmol/l", min = 0.0);
Real sensor_TSS1.TSS.signal[sensor_TSS1.TSS.n] "Real output signals";
Real Constant3.outPort.signal[Constant3.outPort.n] "Real output signals";
Real Constant3.y[Constant3.nout];

equation
divider.In.Q+divider.Out1.Q+divider.Out2.Q = 0;
divider.Out1.Si = divider.In.Si;
divider.Out1.Ss = divider.In.Ss;
divider.Out1.Xi = divider.In.Xi;
divider.Out1.Xs = divider.In.Xs;
divider.Out1.Xbh = divider.In.Xbh;
divider.Out1.Xba = divider.In.Xba;
divider.Out1.Xp = divider.In.Xp;
divider.Out1.So = divider.In.So;
divider.Out1.Sno = divider.In.Sno;
divider.Out1.Snh = divider.In.Snh;
divider.Out1.Snd = divider.In.Snd;
divider.Out1.Xnd = divider.In.Xnd;
divider.Out1.Salk = divider.In.Salk;
divider.Out2.Si = divider.In.Si;
divider.Out2.Ss = divider.In.Ss;
divider.Out2.Xi = divider.In.Xi;
divider.Out2.Xs = divider.In.Xs;
divider.Out2.Xbh = divider.In.Xbh;
divider.Out2.Xba = divider.In.Xba;
divider.Out2.Xp = divider.In.Xp;
divider.Out2.So = divider.In.So;
divider.Out2.Sno = divider.In.Sno;
divider.Out2.Snh = divider.In.Snh;
divider.Out2.Snd = divider.In.Snd;
divider.Out2.Xnd = divider.In.Xnd;
divider.Out2.Salk = divider.In.Salk;
tank3.mu_h = tank3.mu_h_T*exp(0.069*(tank3.T.signal[1]-15));
tank3.b_h = tank3.b_h_T*exp(0.069*(tank3.T.signal[1]-15));
tank3.mu_a = tank3.mu_a_T*exp(0.098*(tank3.T.signal[1]-15));
tank3.b_a = tank3.b_a_T*exp(0.08*(tank3.T.signal[1]-15));
tank3.k_a = tank3.k_a_T*exp(0.069*(tank3.T.signal[1]-15));
tank3.k_h = tank3.k_h_T*exp(0.11*(tank3.T.signal[1]-15));
tank3.K_x = tank3.K_x_T*exp(0.11*(tank3.T.signal[1]-15));
tank3.p1 = tank3.mu_h*tank3.Ss*tank3.So*tank3.Xbh/(tank3.K_s+tank3.Ss)/(
  tank3.K_oh+tank3.So);
tank3.p2 = tank3.mu_h*tank3.Ss*tank3.K_oh*tank3.Sno*tank3.ny_g*tank3.Xbh/(
  tank3.K_s+tank3.Ss)/(tank3.K_oh+tank3.So)/(tank3.K_no+tank3.Sno);
tank3.p3 = tank3.mu_a*tank3.Snh*tank3.So*tank3.Xba/(tank3.K_nh+tank3.Snh)/(
  tank3.K_oa+tank3.So);
tank3.p4 = tank3.b_h*tank3.Xbh;
tank3.p5 = tank3.b_a*tank3.Xba;
tank3.p6 = tank3.k_a*tank3.Snd*tank3.Xbh;
tank3.p7 = tank3.k_h*tank3.Xs*(tank3.So/(tank3.K_oh+tank3.So)+tank3.ny_h*
  tank3.K_oh*tank3.Sno/(tank3.K_oh+tank3.So)/(tank3.K_no+tank3.Sno))*tank3.Xbh/
  tank3.Xbh/(tank3.K_x+tank3.Xs/tank3.Xbh);
tank3.p8 = tank3.p7*tank3.Xnd/tank3.Xs;
tank3.r1 = 0;
tank3.r2 = tank3.p7-(tank3.p1+tank3.p2)/tank3.Y_h;
tank3.r3 = 0;
tank3.r4 = (1-tank3.f_p)*(tank3.p4+tank3.p5)-tank3.p7;
tank3.r5 = tank3.p1+tank3.p2-tank3.p4;
tank3.r6 = tank3.p3-tank3.p5;
tank3.r7 = tank3.f_p*(tank3.p4+tank3.p5);
tank3.r8 =  -((1-tank3.Y_h)*tank3.p1/tank3.Y_h+(4.57-tank3.Y_a)*tank3.p3/
  tank3.Y_a);
tank3.r9 = tank3.p3/tank3.Y_a-(1-tank3.Y_h)*tank3.p2/(2.86*tank3.Y_h);
tank3.r10 = tank3.p6-(tank3.i_xb*(tank3.p1+tank3.p2)+(tank3.i_xb+1/tank3.Y_a)*
  tank3.p3);
tank3.r11 = tank3.p8-tank3.p6;
tank3.r12 = (tank3.i_xb-tank3.f_p*tank3.i_xp)*(tank3.p4+tank3.p5)-tank3.p8;
tank3.r13 = ((1-tank3.Y_h)/(40.04*tank3.Y_h)-0.0714285714285714*tank3.i_xb)*
  tank3.p2-0.0714285714285714*tank3.i_xb*tank3.p1-(0.0714285714285714*tank3.i_xb
  +1/(7*tank3.Y_a))*tank3.p3+0.0714285714285714*tank3.p6;
der(tank3.Si) = tank3.inputSi+tank3.r1;
der(tank3.Ss) = tank3.inputSs+tank3.r2;
der(tank3.Xi) = tank3.inputXi+tank3.r3;
der(tank3.Xs) = tank3.inputXs+tank3.r4;
der(tank3.Xbh) = tank3.inputXbh+tank3.r5;
der(tank3.Xba) = tank3.inputXba+tank3.r6;
der(tank3.Xp) = tank3.inputXp+tank3.r7;
der(tank3.So) = tank3.inputSo+tank3.r8+tank3.aeration;
der(tank3.Sno) = tank3.inputSno+tank3.r9;
der(tank3.Snh) = tank3.inputSnh+tank3.r10;
der(tank3.Snd) = tank3.inputSnd+tank3.r11;
der(tank3.Xnd) = tank3.inputXnd+tank3.r12;
der(tank3.Salk) = tank3.inputSalk+tank3.r13;
tank3.Out.Q+tank3.In.Q = 0;
tank3.Out.Si = tank3.Si;
tank3.Out.Ss = tank3.Ss;
tank3.Out.Xi = tank3.Xi;
tank3.Out.Xs = tank3.Xs;
tank3.Out.Xbh = tank3.Xbh;
tank3.Out.Xba = tank3.Xba;
tank3.Out.Xp = tank3.Xp;
tank3.Out.So = tank3.So;
tank3.Out.Sno = tank3.Sno;
tank3.Out.Snh = tank3.Snh;
tank3.Out.Snd = tank3.Snd;
tank3.Out.Xnd = tank3.Xnd;
tank3.Out.Salk = tank3.Salk;
tank3.MeasurePort.Si = tank3.Si;
tank3.MeasurePort.Ss = tank3.Ss;
tank3.MeasurePort.Xi = tank3.Xi;
tank3.MeasurePort.Xs = tank3.Xs;
tank3.MeasurePort.Xbh = tank3.Xbh;
tank3.MeasurePort.Xba = tank3.Xba;
tank3.MeasurePort.Xp = tank3.Xp;
tank3.MeasurePort.So = tank3.So;
tank3.MeasurePort.Sno = tank3.Sno;
tank3.MeasurePort.Snh = tank3.Snh;
tank3.MeasurePort.Snd = tank3.Snd;
tank3.MeasurePort.Xnd = tank3.Xnd;
tank3.MeasurePort.Salk = tank3.Salk;
tank3.So_sat = 13.89+((0.007311-6.588E-005*tank3.T.signal[1])*tank3.T.signal[1]-
  0.3825)*tank3.T.signal[1];
tank3.aeration = tank3.alpha*(tank3.So_sat-tank3.So)*tank3.AirIn.Q_air*
  tank3.R_air*tank3.de/tank3.So_sat/tank3.V;
tank3.inputSi = (tank3.In.Si-tank3.Si)*tank3.In.Q/tank3.V;
tank3.inputSs = (tank3.In.Ss-tank3.Ss)*tank3.In.Q/tank3.V;
tank3.inputXi = (tank3.In.Xi-tank3.Xi)*tank3.In.Q/tank3.V;
tank3.inputXs = (tank3.In.Xs-tank3.Xs)*tank3.In.Q/tank3.V;
tank3.inputXbh = (tank3.In.Xbh-tank3.Xbh)*tank3.In.Q/tank3.V;
tank3.inputXba = (tank3.In.Xba-tank3.Xba)*tank3.In.Q/tank3.V;
tank3.inputXp = (tank3.In.Xp-tank3.Xp)*tank3.In.Q/tank3.V;
tank3.inputSo = (tank3.In.So-tank3.So)*tank3.In.Q/tank3.V;
tank3.inputSno = (tank3.In.Sno-tank3.Sno)*tank3.In.Q/tank3.V;
tank3.inputSnh = (tank3.In.Snh-tank3.Snh)*tank3.In.Q/tank3.V;
tank3.inputSnd = (tank3.In.Snd-tank3.Snd)*tank3.In.Q/tank3.V;
tank3.inputXnd = (tank3.In.Xnd-tank3.Xnd)*tank3.In.Q/tank3.V;
tank3.inputSalk = (tank3.In.Salk-tank3.Salk)*tank3.In.Q/tank3.V;
tank2.mu_h = tank2.mu_h_T*exp(0.069*(tank2.T.signal[1]-15));
tank2.b_h = tank2.b_h_T*exp(0.069*(tank2.T.signal[1]-15));
tank2.mu_a = tank2.mu_a_T*exp(0.098*(tank2.T.signal[1]-15));
tank2.b_a = tank2.b_a_T*exp(0.08*(tank2.T.signal[1]-15));
tank2.k_a = tank2.k_a_T*exp(0.069*(tank2.T.signal[1]-15));
tank2.k_h = tank2.k_h_T*exp(0.11*(tank2.T.signal[1]-15));
tank2.K_x = tank2.K_x_T*exp(0.11*(tank2.T.signal[1]-15));
tank2.p1 = tank2.mu_h*tank2.Ss*tank2.So*tank2.Xbh/(tank2.K_s+tank2.Ss)/(
  tank2.K_oh+tank2.So);
tank2.p2 = tank2.mu_h*tank2.Ss*tank2.K_oh*tank2.Sno*tank2.ny_g*tank2.Xbh/(
  tank2.K_s+tank2.Ss)/(tank2.K_oh+tank2.So)/(tank2.K_no+tank2.Sno);
tank2.p3 = tank2.mu_a*tank2.Snh*tank2.So*tank2.Xba/(tank2.K_nh+tank2.Snh)/(
  tank2.K_oa+tank2.So);
tank2.p4 = tank2.b_h*tank2.Xbh;
tank2.p5 = tank2.b_a*tank2.Xba;
tank2.p6 = tank2.k_a*tank2.Snd*tank2.Xbh;
tank2.p7 = tank2.k_h*tank2.Xs*(tank2.So/(tank2.K_oh+tank2.So)+tank2.ny_h*
  tank2.K_oh*tank2.Sno/(tank2.K_oh+tank2.So)/(tank2.K_no+tank2.Sno))*tank2.Xbh/
  tank2.Xbh/(tank2.K_x+tank2.Xs/tank2.Xbh);
tank2.p8 = tank2.p7*tank2.Xnd/tank2.Xs;
tank2.r1 = 0;
tank2.r2 = tank2.p7-(tank2.p1+tank2.p2)/tank2.Y_h;
tank2.r3 = 0;
tank2.r4 = (1-tank2.f_p)*(tank2.p4+tank2.p5)-tank2.p7;
tank2.r5 = tank2.p1+tank2.p2-tank2.p4;
tank2.r6 = tank2.p3-tank2.p5;
tank2.r7 = tank2.f_p*(tank2.p4+tank2.p5);
tank2.r8 =  -((1-tank2.Y_h)*tank2.p1/tank2.Y_h+(4.57-tank2.Y_a)*tank2.p3/
  tank2.Y_a);
tank2.r9 = tank2.p3/tank2.Y_a-(1-tank2.Y_h)*tank2.p2/(2.86*tank2.Y_h);
tank2.r10 = tank2.p6-(tank2.i_xb*(tank2.p1+tank2.p2)+(tank2.i_xb+1/tank2.Y_a)*
  tank2.p3);
tank2.r11 = tank2.p8-tank2.p6;
tank2.r12 = (tank2.i_xb-tank2.f_p*tank2.i_xp)*(tank2.p4+tank2.p5)-tank2.p8;
tank2.r13 = ((1-tank2.Y_h)/(40.04*tank2.Y_h)-0.0714285714285714*tank2.i_xb)*
  tank2.p2-0.0714285714285714*tank2.i_xb*tank2.p1-(0.0714285714285714*tank2.i_xb
  +1/(7*tank2.Y_a))*tank2.p3+0.0714285714285714*tank2.p6;
der(tank2.Si) = tank2.inputSi+tank2.r1;
der(tank2.Ss) = tank2.inputSs+tank2.r2;
der(tank2.Xi) = tank2.inputXi+tank2.r3;
der(tank2.Xs) = tank2.inputXs+tank2.r4;
der(tank2.Xbh) = tank2.inputXbh+tank2.r5;
der(tank2.Xba) = tank2.inputXba+tank2.r6;
der(tank2.Xp) = tank2.inputXp+tank2.r7;
der(tank2.So) = tank2.inputSo+tank2.r8+tank2.aeration;
der(tank2.Sno) = tank2.inputSno+tank2.r9;
der(tank2.Snh) = tank2.inputSnh+tank2.r10;
der(tank2.Snd) = tank2.inputSnd+tank2.r11;
der(tank2.Xnd) = tank2.inputXnd+tank2.r12;
der(tank2.Salk) = tank2.inputSalk+tank2.r13;
tank2.Out.Q+tank2.In.Q = 0;
tank2.Out.Si = tank2.Si;
tank2.Out.Ss = tank2.Ss;
tank2.Out.Xi = tank2.Xi;
tank2.Out.Xs = tank2.Xs;
tank2.Out.Xbh = tank2.Xbh;
tank2.Out.Xba = tank2.Xba;
tank2.Out.Xp = tank2.Xp;
tank2.Out.So = tank2.So;
tank2.Out.Sno = tank2.Sno;
tank2.Out.Snh = tank2.Snh;
tank2.Out.Snd = tank2.Snd;
tank2.Out.Xnd = tank2.Xnd;
tank2.Out.Salk = tank2.Salk;
tank2.MeasurePort.Si = tank2.Si;
tank2.MeasurePort.Ss = tank2.Ss;
tank2.MeasurePort.Xi = tank2.Xi;
tank2.MeasurePort.Xs = tank2.Xs;
tank2.MeasurePort.Xbh = tank2.Xbh;
tank2.MeasurePort.Xba = tank2.Xba;
tank2.MeasurePort.Xp = tank2.Xp;
tank2.MeasurePort.So = tank2.So;
tank2.MeasurePort.Sno = tank2.Sno;
tank2.MeasurePort.Snh = tank2.Snh;
tank2.MeasurePort.Snd = tank2.Snd;
tank2.MeasurePort.Xnd = tank2.Xnd;
tank2.MeasurePort.Salk = tank2.Salk;
tank2.So_sat = 13.89+((0.007311-6.588E-005*tank2.T.signal[1])*tank2.T.signal[1]-
  0.3825)*tank2.T.signal[1];
tank2.aeration = tank2.alpha*(tank2.So_sat-tank2.So)*tank2.AirIn.Q_air*
  tank2.R_air*tank2.de/tank2.So_sat/tank2.V;
tank2.inputSi = (tank2.In.Si-tank2.Si)*tank2.In.Q/tank2.V;
tank2.inputSs = (tank2.In.Ss-tank2.Ss)*tank2.In.Q/tank2.V;
tank2.inputXi = (tank2.In.Xi-tank2.Xi)*tank2.In.Q/tank2.V;
tank2.inputXs = (tank2.In.Xs-tank2.Xs)*tank2.In.Q/tank2.V;
tank2.inputXbh = (tank2.In.Xbh-tank2.Xbh)*tank2.In.Q/tank2.V;
tank2.inputXba = (tank2.In.Xba-tank2.Xba)*tank2.In.Q/tank2.V;
tank2.inputXp = (tank2.In.Xp-tank2.Xp)*tank2.In.Q/tank2.V;
tank2.inputSo = (tank2.In.So-tank2.So)*tank2.In.Q/tank2.V;
tank2.inputSno = (tank2.In.Sno-tank2.Sno)*tank2.In.Q/tank2.V;
tank2.inputSnh = (tank2.In.Snh-tank2.Snh)*tank2.In.Q/tank2.V;
tank2.inputSnd = (tank2.In.Snd-tank2.Snd)*tank2.In.Q/tank2.V;
tank2.inputXnd = (tank2.In.Xnd-tank2.Xnd)*tank2.In.Q/tank2.V;
tank2.inputSalk = (tank2.In.Salk-tank2.Salk)*tank2.In.Q/tank2.V;
tank1.mu_h = tank1.mu_h_T*exp(0.069*(tank1.T.signal[1]-15));
tank1.b_h = tank1.b_h_T*exp(0.069*(tank1.T.signal[1]-15));
tank1.mu_a = tank1.mu_a_T*exp(0.098*(tank1.T.signal[1]-15));
tank1.b_a = tank1.b_a_T*exp(0.08*(tank1.T.signal[1]-15));
tank1.k_a = tank1.k_a_T*exp(0.069*(tank1.T.signal[1]-15));
tank1.k_h = tank1.k_h_T*exp(0.11*(tank1.T.signal[1]-15));
tank1.K_x = tank1.K_x_T*exp(0.11*(tank1.T.signal[1]-15));
tank1.p1 = tank1.mu_h*tank1.Ss*tank1.So*tank1.Xbh/(tank1.K_s+tank1.Ss)/(
  tank1.K_oh+tank1.So);
tank1.p2 = tank1.mu_h*tank1.Ss*tank1.K_oh*tank1.Sno*tank1.ny_g*tank1.Xbh/(
  tank1.K_s+tank1.Ss)/(tank1.K_oh+tank1.So)/(tank1.K_no+tank1.Sno);
tank1.p3 = tank1.mu_a*tank1.Snh*tank1.So*tank1.Xba/(tank1.K_nh+tank1.Snh)/(
  tank1.K_oa+tank1.So);
tank1.p4 = tank1.b_h*tank1.Xbh;
tank1.p5 = tank1.b_a*tank1.Xba;
tank1.p6 = tank1.k_a*tank1.Snd*tank1.Xbh;
tank1.p7 = tank1.k_h*tank1.Xs*(tank1.So/(tank1.K_oh+tank1.So)+tank1.ny_h*
  tank1.K_oh*tank1.Sno/(tank1.K_oh+tank1.So)/(tank1.K_no+tank1.Sno))*tank1.Xbh/
  tank1.Xbh/(tank1.K_x+tank1.Xs/tank1.Xbh);
tank1.p8 = tank1.p7*tank1.Xnd/tank1.Xs;
tank1.r1 = 0;
tank1.r2 = tank1.p7-(tank1.p1+tank1.p2)/tank1.Y_h;
tank1.r3 = 0;
tank1.r4 = (1-tank1.f_p)*(tank1.p4+tank1.p5)-tank1.p7;
tank1.r5 = tank1.p1+tank1.p2-tank1.p4;
tank1.r6 = tank1.p3-tank1.p5;
tank1.r7 = tank1.f_p*(tank1.p4+tank1.p5);
tank1.r8 =  -((1-tank1.Y_h)*tank1.p1/tank1.Y_h+(4.57-tank1.Y_a)*tank1.p3/
  tank1.Y_a);
tank1.r9 = tank1.p3/tank1.Y_a-(1-tank1.Y_h)*tank1.p2/(2.86*tank1.Y_h);
tank1.r10 = tank1.p6-(tank1.i_xb*(tank1.p1+tank1.p2)+(tank1.i_xb+1/tank1.Y_a)*
  tank1.p3);
tank1.r11 = tank1.p8-tank1.p6;
tank1.r12 = (tank1.i_xb-tank1.f_p*tank1.i_xp)*(tank1.p4+tank1.p5)-tank1.p8;
tank1.r13 = ((1-tank1.Y_h)/(40.04*tank1.Y_h)-0.0714285714285714*tank1.i_xb)*
  tank1.p2-0.0714285714285714*tank1.i_xb*tank1.p1-(0.0714285714285714*tank1.i_xb
  +1/(7*tank1.Y_a))*tank1.p3+0.0714285714285714*tank1.p6;
der(tank1.Si) = tank1.inputSi+tank1.r1;
der(tank1.Ss) = tank1.inputSs+tank1.r2;
der(tank1.Xi) = tank1.inputXi+tank1.r3;
der(tank1.Xs) = tank1.inputXs+tank1.r4;
der(tank1.Xbh) = tank1.inputXbh+tank1.r5;
der(tank1.Xba) = tank1.inputXba+tank1.r6;
der(tank1.Xp) = tank1.inputXp+tank1.r7;
der(tank1.So) = tank1.inputSo+tank1.r8+tank1.aeration;
der(tank1.Sno) = tank1.inputSno+tank1.r9;
der(tank1.Snh) = tank1.inputSnh+tank1.r10;
der(tank1.Snd) = tank1.inputSnd+tank1.r11;
der(tank1.Xnd) = tank1.inputXnd+tank1.r12;
der(tank1.Salk) = tank1.inputSalk+tank1.r13;
tank1.Out.Q+tank1.In.Q = 0;
tank1.Out.Si = tank1.Si;
tank1.Out.Ss = tank1.Ss;
tank1.Out.Xi = tank1.Xi;
tank1.Out.Xs = tank1.Xs;
tank1.Out.Xbh = tank1.Xbh;
tank1.Out.Xba = tank1.Xba;
tank1.Out.Xp = tank1.Xp;
tank1.Out.So = tank1.So;
tank1.Out.Sno = tank1.Sno;
tank1.Out.Snh = tank1.Snh;
tank1.Out.Snd = tank1.Snd;
tank1.Out.Xnd = tank1.Xnd;
tank1.Out.Salk = tank1.Salk;
tank1.MeasurePort.Si = tank1.Si;
tank1.MeasurePort.Ss = tank1.Ss;
tank1.MeasurePort.Xi = tank1.Xi;
tank1.MeasurePort.Xs = tank1.Xs;
tank1.MeasurePort.Xbh = tank1.Xbh;
tank1.MeasurePort.Xba = tank1.Xba;
tank1.MeasurePort.Xp = tank1.Xp;
tank1.MeasurePort.So = tank1.So;
tank1.MeasurePort.Sno = tank1.Sno;
tank1.MeasurePort.Snh = tank1.Snh;
tank1.MeasurePort.Snd = tank1.Snd;
tank1.MeasurePort.Xnd = tank1.Xnd;
tank1.MeasurePort.Salk = tank1.Salk;
tank1.aeration = 0;
tank1.inputSi = (tank1.In.Si-tank1.Si)*tank1.In.Q/tank1.V;
tank1.inputSs = (tank1.In.Ss-tank1.Ss)*tank1.In.Q/tank1.V;
tank1.inputXi = (tank1.In.Xi-tank1.Xi)*tank1.In.Q/tank1.V;
tank1.inputXs = (tank1.In.Xs-tank1.Xs)*tank1.In.Q/tank1.V;
tank1.inputXbh = (tank1.In.Xbh-tank1.Xbh)*tank1.In.Q/tank1.V;
tank1.inputXba = (tank1.In.Xba-tank1.Xba)*tank1.In.Q/tank1.V;
tank1.inputXp = (tank1.In.Xp-tank1.Xp)*tank1.In.Q/tank1.V;
tank1.inputSo = (tank1.In.So-tank1.So)*tank1.In.Q/tank1.V;
tank1.inputSno = (tank1.In.Sno-tank1.Sno)*tank1.In.Q/tank1.V;
tank1.inputSnh = (tank1.In.Snh-tank1.Snh)*tank1.In.Q/tank1.V;
tank1.inputSnd = (tank1.In.Snd-tank1.Snd)*tank1.In.Q/tank1.V;
tank1.inputXnd = (tank1.In.Xnd-tank1.Xnd)*tank1.In.Q/tank1.V;
tank1.inputSalk = (tank1.In.Salk-tank1.Salk)*tank1.In.Q/tank1.V;
mixer.In1.Q+mixer.In2.Q+mixer.In3.Q+mixer.Out.Q = 0;
mixer.Out.Si = (mixer.In1.Si*mixer.In1.Q+mixer.In2.Si*mixer.In2.Q+mixer.In3.Si*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Ss = (mixer.In1.Ss*mixer.In1.Q+mixer.In2.Ss*mixer.In2.Q+mixer.In3.Ss*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xi = (mixer.In1.Xi*mixer.In1.Q+mixer.In2.Xi*mixer.In2.Q+mixer.In3.Xi*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xs = (mixer.In1.Xs*mixer.In1.Q+mixer.In2.Xs*mixer.In2.Q+mixer.In3.Xs*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xbh = (mixer.In1.Xbh*mixer.In1.Q+mixer.In2.Xbh*mixer.In2.Q+
  mixer.In3.Xbh*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xba = (mixer.In1.Xba*mixer.In1.Q+mixer.In2.Xba*mixer.In2.Q+
  mixer.In3.Xba*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xp = (mixer.In1.Xp*mixer.In1.Q+mixer.In2.Xp*mixer.In2.Q+mixer.In3.Xp*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.So = (mixer.In1.So*mixer.In1.Q+mixer.In2.So*mixer.In2.Q+mixer.In3.So*
  mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Sno = (mixer.In1.Sno*mixer.In1.Q+mixer.In2.Sno*mixer.In2.Q+
  mixer.In3.Sno*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Snh = (mixer.In1.Snh*mixer.In1.Q+mixer.In2.Snh*mixer.In2.Q+
  mixer.In3.Snh*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Snd = (mixer.In1.Snd*mixer.In1.Q+mixer.In2.Snd*mixer.In2.Q+
  mixer.In3.Snd*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Xnd = (mixer.In1.Xnd*mixer.In1.Q+mixer.In2.Xnd*mixer.In2.Q+
  mixer.In3.Xnd*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
mixer.Out.Salk = (mixer.In1.Salk*mixer.In1.Q+mixer.In2.Salk*mixer.In2.Q+
  mixer.In3.Salk*mixer.In3.Q)/(mixer.In1.Q+mixer.In2.Q+mixer.In3.Q);
WWSource.Out.Q =  -WWSource.data.signal[1];
WWSource.Out.Si = WWSource.data.signal[2];
WWSource.Out.Ss = WWSource.data.signal[3];
WWSource.Out.Xi = WWSource.data.signal[4];
WWSource.Out.Xs = WWSource.data.signal[5];
WWSource.Out.Xbh = WWSource.data.signal[6];
WWSource.Out.Xba = WWSource.data.signal[7];
WWSource.Out.Xp = WWSource.data.signal[8];
WWSource.Out.So = WWSource.data.signal[9];
WWSource.Out.Sno = WWSource.data.signal[10];
WWSource.Out.Snh = WWSource.data.signal[11];
WWSource.Out.Snd = WWSource.data.signal[12];
WWSource.Out.Xnd = WWSource.data.signal[13];
WWSource.Out.Salk = WWSource.data.signal[14];
blower1.H = 0.5*(blower1.Q_max-blower1.Q_min+blower1.u.signal[1]*(blower1.Q_max-
  blower1.Q_min))+blower1.Q_min;
blower1.AirOut.Q_air =  -(if blower1.H > blower1.Q_max then blower1.Q_max else 
  if blower1.H < blower1.Q_min then blower1.Q_min else blower1.H);
blower2.H = 0.5*(blower2.Q_max-blower2.Q_min+blower2.u.signal[1]*(blower2.Q_max-
  blower2.Q_min))+blower2.Q_min;
blower2.AirOut.Q_air =  -(if blower2.H > blower2.Q_max then blower2.Q_max else 
  if blower2.H < blower2.Q_min then blower2.Q_min else blower2.H);
sensor_O2.In.Q = 0;
sensor_O2.So.signal[1] = sensor_O2.In.So;
Feedback.outPort.signal = Feedback.inPort1.signal-Feedback.inPort2.signal;
PI1.y = PI1.outPort.signal;

for i in (1:PI1.n) loop
  der(PI1.x[i]) = PI1.u[i]/PI1.p_T[i];
  PI1.y[i] = PI1.p_k[i]*(PI1.x[i]+PI1.u[i]);
end for;

Constant1.y = Constant1.outPort.signal;
Constant1.outPort.signal = Constant1.k;
RecyclePump.H = 0.5*(RecyclePump.Q_max-RecyclePump.Q_min+RecyclePump.u.signal[1]
  *(RecyclePump.Q_max-RecyclePump.Q_min))+RecyclePump.Q_min;
RecyclePump.Out.Q =  -(if RecyclePump.H > RecyclePump.Q_max then 
  RecyclePump.Q_max else if RecyclePump.H < RecyclePump.Q_min then 
  RecyclePump.Q_min else RecyclePump.H);
RecyclePump.Out.Q+RecyclePump.In.Q = 0;
RecyclePump.Out.Si = RecyclePump.In.Si;
RecyclePump.Out.Ss = RecyclePump.In.Ss;
RecyclePump.Out.Xi = RecyclePump.In.Xi;
RecyclePump.Out.Xs = RecyclePump.In.Xs;
RecyclePump.Out.Xbh = RecyclePump.In.Xbh;
RecyclePump.Out.Xba = RecyclePump.In.Xba;
RecyclePump.Out.Xp = RecyclePump.In.Xp;
RecyclePump.Out.So = RecyclePump.In.So;
RecyclePump.Out.Sno = RecyclePump.In.Sno;
RecyclePump.Out.Snh = RecyclePump.In.Snh;
RecyclePump.Out.Snd = RecyclePump.In.Snd;
RecyclePump.Out.Xnd = RecyclePump.In.Xnd;
RecyclePump.Out.Salk = RecyclePump.In.Salk;
ReturnPump.H = 0.5*(ReturnPump.Q_max-ReturnPump.Q_min+ReturnPump.u.signal[1]*(
  ReturnPump.Q_max-ReturnPump.Q_min))+ReturnPump.Q_min;
ReturnPump.Out.Q =  -(if ReturnPump.H > ReturnPump.Q_max then ReturnPump.Q_max
   else if ReturnPump.H < ReturnPump.Q_min then ReturnPump.Q_min else 
  ReturnPump.H);
ReturnPump.Out.Q+ReturnPump.In.Q = 0;
ReturnPump.Out.Si = ReturnPump.In.Si;
ReturnPump.Out.Ss = ReturnPump.In.Ss;
ReturnPump.Out.Xi = ReturnPump.In.Xi;
ReturnPump.Out.Xs = ReturnPump.In.Xs;
ReturnPump.Out.Xbh = ReturnPump.In.Xbh;
ReturnPump.Out.Xba = ReturnPump.In.Xba;
ReturnPump.Out.Xp = ReturnPump.In.Xp;
ReturnPump.Out.So = ReturnPump.In.So;
ReturnPump.Out.Sno = ReturnPump.In.Sno;
ReturnPump.Out.Snh = ReturnPump.In.Snh;
ReturnPump.Out.Snd = ReturnPump.In.Snd;
ReturnPump.Out.Xnd = ReturnPump.In.Xnd;
ReturnPump.Out.Salk = ReturnPump.In.Salk;
WastePump.H = 0.5*(WastePump.Q_max-WastePump.Q_min+WastePump.u.signal[1]*(
  WastePump.Q_max-WastePump.Q_min))+WastePump.Q_min;
WastePump.Out.Q =  -(if WastePump.H > WastePump.Q_max then WastePump.Q_max else 
  if WastePump.H < WastePump.Q_min then WastePump.Q_min else WastePump.H);
WastePump.Out.Q+WastePump.In.Q = 0;
WastePump.Out.Si = WastePump.In.Si;
WastePump.Out.Ss = WastePump.In.Ss;
WastePump.Out.Xi = WastePump.In.Xi;
WastePump.Out.Xs = WastePump.In.Xs;
WastePump.Out.Xbh = WastePump.In.Xbh;
WastePump.Out.Xba = WastePump.In.Xba;
WastePump.Out.Xp = WastePump.In.Xp;
WastePump.Out.So = WastePump.In.So;
WastePump.Out.Sno = WastePump.In.Sno;
WastePump.Out.Snh = WastePump.In.Snh;
WastePump.Out.Snd = WastePump.In.Snd;
WastePump.Out.Xnd = WastePump.In.Xnd;
WastePump.Out.Salk = WastePump.In.Salk;
Constant2.y = Constant2.outPort.signal;
Constant2.outPort.signal = Constant2.k;
Temperature.y = Temperature.outPort.signal;
Temperature.outPort.signal = Temperature.k;
sensor_NH1.In.Q = 0;
sensor_NH1.Snh.signal[1] = sensor_NH1.In.Snh;
sensor_NO1.In.Q = 0;
sensor_NO1.Sno.signal[1] = sensor_NO1.In.Sno;
sensor_TKN1.In.Q = 0;
sensor_TKN1.TKN.signal[1] = sensor_TKN1.In.Snh+sensor_TKN1.In.Snd+
  sensor_TKN1.In.Xnd+sensor_TKN1.i_xb*(sensor_TKN1.In.Xbh+sensor_TKN1.In.Xba)+
  sensor_TKN1.i_xp*(sensor_TKN1.In.Xp+sensor_TKN1.In.Xi);
sensor_TKN1.TKN.signal[2] = sensor_TKN1.TKN.signal[1]+sensor_TKN1.In.Sno;
sensor_COD1.In.Q = 0;
sensor_COD1.COD.signal[1] = sensor_COD1.In.Si+sensor_COD1.In.Ss+sensor_COD1.In.Xi
  +sensor_COD1.In.Xs+sensor_COD1.In.Xbh+sensor_COD1.In.Xba+sensor_COD1.In.Xp;
OxygenSetpoint.y = OxygenSetpoint.outPort.signal;

for i in (1:OxygenSetpoint.nout) loop
  OxygenSetpoint.outPort.signal[i] = OxygenSetpoint.p_offset[i]+(if time < 
    OxygenSetpoint.p_startTime[i] then 0 else OxygenSetpoint.p_height[i]);
end for;
Settler.Xf = 0.75*(Settler.Feed.Xs+Settler.Feed.Xbh+Settler.Feed.Xba+
  Settler.Feed.Xp+Settler.Feed.Xi);
Settler.rXs = Settler.Feed.Xs/Settler.Xf;
Settler.rXbh = Settler.Feed.Xbh/Settler.Xf;
Settler.rXba = Settler.Feed.Xba/Settler.Xf;
Settler.rXp = Settler.Feed.Xp/Settler.Xf;
Settler.rXi = Settler.Feed.Xi/Settler.Xf;
Settler.rXnd = Settler.Feed.Xnd/Settler.Xf;
Settler.te =  -0.714285714285714*Settler.Asc*Settler.hs/(Settler.Return.Q+
  Settler.Waste.Q);
Settler.XB = 1000000*(24*Settler.te)^0.333333333333333/Settler.ISV;
Settler.XR = 0.7*Settler.XB;
der(Settler.hs) = (Settler.Feed.Q*Settler.Xf+(Settler.Return.Q+Settler.Waste.Q)*
  Settler.XR)/(0.5*Settler.Asc*Settler.XB);
Settler.he = Settler.hsc-Settler.hs;
der(Settler.Si1) = (Settler.Feed.Q*Settler.Feed.Si+Settler.Effluent.Q*
  Settler.Si1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Si1)/(0.5*Settler.Asc*
  Settler.he);
der(Settler.Ss1) = (Settler.Feed.Q*Settler.Feed.Ss+Settler.Effluent.Q*
  Settler.Ss1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Ss1)/(0.5*Settler.Asc*
  Settler.he);
der(Settler.So1) = (Settler.Feed.Q*Settler.Feed.So+Settler.Effluent.Q*
  Settler.So1+(Settler.Waste.Q+Settler.Return.Q)*Settler.So1)/(0.5*Settler.Asc*
  Settler.he);
der(Settler.Sno1) = (Settler.Feed.Q*Settler.Feed.Sno+Settler.Effluent.Q*
  Settler.Sno1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Sno1)/(0.5*Settler.Asc
  *Settler.he);
der(Settler.Snh1) = (Settler.Feed.Q*Settler.Feed.Snh+Settler.Effluent.Q*
  Settler.Snh1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Snh1)/(0.5*Settler.Asc
  *Settler.he);
der(Settler.Snd1) = (Settler.Feed.Q*Settler.Feed.Snd+Settler.Effluent.Q*
  Settler.Snd1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Snd1)/(0.5*Settler.Asc
  *Settler.he);
der(Settler.Salk1) = (Settler.Feed.Q*Settler.Feed.Salk+Settler.Effluent.Q*
  Settler.Salk1+(Settler.Waste.Q+Settler.Return.Q)*Settler.Salk1)/(0.5*
  Settler.Asc*Settler.he);
der(Settler.Si2) = (Settler.Effluent.Q*Settler.Si2-Settler.Effluent.Q*
  Settler.Si1)/(0.5*Settler.Asc*Settler.he);
der(Settler.Ss2) = (Settler.Effluent.Q*Settler.Ss2-Settler.Effluent.Q*
  Settler.Ss1)/(0.5*Settler.Asc*Settler.he);
der(Settler.So2) = (Settler.Effluent.Q*Settler.So2-Settler.Effluent.Q*
  Settler.So1)/(0.5*Settler.Asc*Settler.he);
der(Settler.Sno2) = (Settler.Effluent.Q*Settler.Sno2-Settler.Effluent.Q*
  Settler.Sno1)/(0.5*Settler.Asc*Settler.he);
der(Settler.Snh2) = (Settler.Effluent.Q*Settler.Snh2-Settler.Effluent.Q*
  Settler.Snh1)/(0.5*Settler.Asc*Settler.he);
der(Settler.Snd2) = (Settler.Effluent.Q*Settler.Snd2-Settler.Effluent.Q*
  Settler.Snd1)/(0.5*Settler.Asc*Settler.he);
der(Settler.Salk2) = (Settler.Effluent.Q*Settler.Salk2-Settler.Effluent.Q*
  Settler.Salk1)/(0.5*Settler.Asc*Settler.he);
Settler.Feed.Q+Settler.Effluent.Q+Settler.Return.Q+Settler.Waste.Q = 0;

Settler.Effluent.Si = Settler.Si2;
Settler.Effluent.Ss = Settler.Ss2;
Settler.Effluent.So = Settler.So2;
Settler.Effluent.Sno = Settler.Sno2;
Settler.Effluent.Snh = Settler.Snh2;
Settler.Effluent.Snd = Settler.Snd2;
Settler.Effluent.Salk = Settler.Salk2;
Settler.Effluent.Xi = 0;
Settler.Effluent.Xs = 0;
Settler.Effluent.Xbh = 0;
Settler.Effluent.Xba = 0;
Settler.Effluent.Xp = 0;
Settler.Effluent.Xnd = 0;
Settler.Return.Si = Settler.Si1;
Settler.Return.Ss = Settler.Ss1;
Settler.Return.So = Settler.So1;
Settler.Return.Sno = Settler.Sno1;
Settler.Return.Snh = Settler.Snh1;
Settler.Return.Snd = Settler.Snd1;
Settler.Return.Salk = Settler.Salk1;
Settler.Return.Xi = Settler.rXi*Settler.XR;
Settler.Return.Xs = Settler.rXs*Settler.XR;
Settler.Return.Xbh = Settler.rXbh*Settler.XR;
Settler.Return.Xba = Settler.rXba*Settler.XR;
Settler.Return.Xp = Settler.rXp*Settler.XR;
Settler.Return.Xnd = Settler.rXnd*Settler.XR;
Settler.Waste.Si = Settler.Si1;
Settler.Waste.Ss = Settler.Ss1;
Settler.Waste.So = Settler.So1;
Settler.Waste.Sno = Settler.Sno1;
Settler.Waste.Snh = Settler.Snh1;
Settler.Waste.Snd = Settler.Snd1;
Settler.Waste.Salk = Settler.Salk1;
Settler.Waste.Xi = Settler.rXi*Settler.XR;
Settler.Waste.Xs = Settler.rXs*Settler.XR;
Settler.Waste.Xbh = Settler.rXbh*Settler.XR;
Settler.Waste.Xba = Settler.rXba*Settler.XR;
Settler.Waste.Xp = Settler.rXp*Settler.XR;
Settler.Waste.Xnd = Settler.rXnd*Settler.XR;
sensor_TSS1.In.Q = 0;
sensor_TSS1.TSS.signal[1] = 0.75*(sensor_TSS1.In.Xs+sensor_TSS1.In.Xbh+
  sensor_TSS1.In.Xba+sensor_TSS1.In.Xp+sensor_TSS1.In.Xi);
Constant3.y = Constant3.outPort.signal;
Constant3.outPort.signal = Constant3.k;

assert(RecyclePump.u.n == Constant1.outPort.n, "Parameters in connected connectors must be equal");

assert(blower1.u.n == Constant1.outPort.n, "Parameters in connected connectors must be equal");
RecyclePump.u.signal = Constant1.outPort.signal;
blower1.u.signal = Constant1.outPort.signal;
assert(ReturnPump.u.n == Constant2.outPort.n, "Parameters in connected connectors must be equal");
assert(WastePump.u.n == Constant2.outPort.n, "Parameters in connected connectors must be equal");
ReturnPump.u.signal = Constant2.outPort.signal;
WastePump.u.signal = Constant2.outPort.signal;
assert(WWSource.data.n == Constant3.outPort.n, "Parameters in connected connectors must be equal");
WWSource.data.signal = Constant3.outPort.signal;
Effluent.In.Q+Settler.Effluent.Q+sensor_COD1.In.Q+sensor_NH1.In.Q+
  sensor_NO1.In.Q+sensor_TKN1.In.Q = 0;
Settler.Effluent.Salk = Effluent.In.Salk;
sensor_COD1.In.Salk = Effluent.In.Salk;
sensor_NH1.In.Salk = Effluent.In.Salk;
sensor_NO1.In.Salk = Effluent.In.Salk;
sensor_TKN1.In.Salk = Effluent.In.Salk;
Settler.Effluent.Si = Effluent.In.Si;
sensor_COD1.In.Si = Effluent.In.Si;
sensor_NH1.In.Si = Effluent.In.Si;
sensor_NO1.In.Si = Effluent.In.Si;
sensor_TKN1.In.Si = Effluent.In.Si;
Settler.Effluent.Snd = Effluent.In.Snd;
sensor_COD1.In.Snd = Effluent.In.Snd;
sensor_NH1.In.Snd = Effluent.In.Snd;
sensor_NO1.In.Snd = Effluent.In.Snd;
sensor_TKN1.In.Snd = Effluent.In.Snd;
Settler.Effluent.Snh = Effluent.In.Snh;
sensor_COD1.In.Snh = Effluent.In.Snh;
sensor_NH1.In.Snh = Effluent.In.Snh;
sensor_NO1.In.Snh = Effluent.In.Snh;
sensor_TKN1.In.Snh = Effluent.In.Snh;
Settler.Effluent.Sno = Effluent.In.Sno;
sensor_COD1.In.Sno = Effluent.In.Sno;
sensor_NH1.In.Sno = Effluent.In.Sno;
sensor_NO1.In.Sno = Effluent.In.Sno;
sensor_TKN1.In.Sno = Effluent.In.Sno;
Settler.Effluent.So = Effluent.In.So;
sensor_COD1.In.So = Effluent.In.So;
sensor_NH1.In.So = Effluent.In.So;
sensor_NO1.In.So = Effluent.In.So;
sensor_TKN1.In.So = Effluent.In.So;
Settler.Effluent.Ss = Effluent.In.Ss;
sensor_COD1.In.Ss = Effluent.In.Ss;
sensor_NH1.In.Ss = Effluent.In.Ss;
sensor_NO1.In.Ss = Effluent.In.Ss;
sensor_TKN1.In.Ss = Effluent.In.Ss;
Settler.Effluent.Xba = Effluent.In.Xba;
sensor_COD1.In.Xba = Effluent.In.Xba;
sensor_NH1.In.Xba = Effluent.In.Xba;
sensor_NO1.In.Xba = Effluent.In.Xba;
sensor_TKN1.In.Xba = Effluent.In.Xba;
Settler.Effluent.Xbh = Effluent.In.Xbh;
sensor_COD1.In.Xbh = Effluent.In.Xbh;
sensor_NH1.In.Xbh = Effluent.In.Xbh;
sensor_NO1.In.Xbh = Effluent.In.Xbh;
sensor_TKN1.In.Xbh = Effluent.In.Xbh;
Settler.Effluent.Xi = Effluent.In.Xi;
sensor_COD1.In.Xi = Effluent.In.Xi;
sensor_NH1.In.Xi = Effluent.In.Xi;
sensor_NO1.In.Xi = Effluent.In.Xi;
sensor_TKN1.In.Xi = Effluent.In.Xi;
Settler.Effluent.Xnd = Effluent.In.Xnd;
sensor_COD1.In.Xnd = Effluent.In.Xnd;
sensor_NH1.In.Xnd = Effluent.In.Xnd;
sensor_NO1.In.Xnd = Effluent.In.Xnd;
sensor_TKN1.In.Xnd = Effluent.In.Xnd;
Settler.Effluent.Xp = Effluent.In.Xp;
sensor_COD1.In.Xp = Effluent.In.Xp;
sensor_NH1.In.Xp = Effluent.In.Xp;
sensor_NO1.In.Xp = Effluent.In.Xp;
sensor_TKN1.In.Xp = Effluent.In.Xp;
Settler.Effluent.Xs = Effluent.In.Xs;
sensor_COD1.In.Xs = Effluent.In.Xs;
sensor_NH1.In.Xs = Effluent.In.Xs;
sensor_NO1.In.Xs = Effluent.In.Xs;
sensor_TKN1.In.Xs = Effluent.In.Xs;
assert(OxygenSetpoint.outPort.n == Feedback.inPort1.n, "Parameters in connected connectors must be equal");
OxygenSetpoint.outPort.signal = Feedback.inPort1.signal;
assert(sensor_O2.So.n == Feedback.inPort2.n, "Parameters in connected connectors must be equal");
sensor_O2.So.signal = Feedback.inPort2.signal;
assert(PI1.inPort.n == Feedback.outPort.n, "Parameters in connected connectors must be equal");
PI1.inPort.signal = Feedback.outPort.signal;
assert(blower2.u.n == PI1.outPort.n, "Parameters in connected connectors must be equal");
blower2.u.signal = PI1.outPort.signal;
RecyclePump.In.Q+divider.Out2.Q = 0;
divider.Out2.Salk = RecyclePump.In.Salk;
divider.Out2.Si = RecyclePump.In.Si;
divider.Out2.Snd = RecyclePump.In.Snd;
divider.Out2.Snh = RecyclePump.In.Snh;
divider.Out2.Sno = RecyclePump.In.Sno;
divider.Out2.So = RecyclePump.In.So;
divider.Out2.Ss = RecyclePump.In.Ss;
divider.Out2.Xba = RecyclePump.In.Xba;
divider.Out2.Xbh = RecyclePump.In.Xbh;
divider.Out2.Xi = RecyclePump.In.Xi;
divider.Out2.Xnd = RecyclePump.In.Xnd;
divider.Out2.Xp = RecyclePump.In.Xp;
divider.Out2.Xs = RecyclePump.In.Xs;
RecyclePump.Out.Q+mixer.In3.Q = 0;
mixer.In3.Salk = RecyclePump.Out.Salk;
mixer.In3.Si = RecyclePump.Out.Si;
mixer.In3.Snd = RecyclePump.Out.Snd;
mixer.In3.Snh = RecyclePump.Out.Snh;
mixer.In3.Sno = RecyclePump.Out.Sno;
mixer.In3.So = RecyclePump.Out.So;
mixer.In3.Ss = RecyclePump.Out.Ss;
mixer.In3.Xba = RecyclePump.Out.Xba;
mixer.In3.Xbh = RecyclePump.Out.Xbh;
mixer.In3.Xi = RecyclePump.Out.Xi;
mixer.In3.Xnd = RecyclePump.Out.Xnd;
mixer.In3.Xp = RecyclePump.Out.Xp;
mixer.In3.Xs = RecyclePump.Out.Xs;
ReturnPump.In.Q+Settler.Return.Q = 0;
Settler.Return.Salk = ReturnPump.In.Salk;
Settler.Return.Si = ReturnPump.In.Si;
Settler.Return.Snd = ReturnPump.In.Snd;
Settler.Return.Snh = ReturnPump.In.Snh;
Settler.Return.Sno = ReturnPump.In.Sno;
Settler.Return.So = ReturnPump.In.So;
Settler.Return.Ss = ReturnPump.In.Ss;
Settler.Return.Xba = ReturnPump.In.Xba;
Settler.Return.Xbh = ReturnPump.In.Xbh;
Settler.Return.Xi = ReturnPump.In.Xi;
Settler.Return.Xnd = ReturnPump.In.Xnd;
Settler.Return.Xp = ReturnPump.In.Xp;
Settler.Return.Xs = ReturnPump.In.Xs;
ReturnPump.Out.Q+mixer.In2.Q = 0;
mixer.In2.Salk = ReturnPump.Out.Salk;
mixer.In2.Si = ReturnPump.Out.Si;
mixer.In2.Snd = ReturnPump.Out.Snd;
mixer.In2.Snh = ReturnPump.Out.Snh;
mixer.In2.Sno = ReturnPump.Out.Sno;
mixer.In2.So = ReturnPump.Out.So;
mixer.In2.Ss = ReturnPump.Out.Ss;
mixer.In2.Xba = ReturnPump.Out.Xba;
mixer.In2.Xbh = ReturnPump.Out.Xbh;
mixer.In2.Xi = ReturnPump.Out.Xi;
mixer.In2.Xnd = ReturnPump.Out.Xnd;
mixer.In2.Xp = ReturnPump.Out.Xp;
mixer.In2.Xs = ReturnPump.Out.Xs;
Settler.Feed.Q+divider.Out1.Q+sensor_TSS1.In.Q = 0;
divider.Out1.Salk = Settler.Feed.Salk;
sensor_TSS1.In.Salk = Settler.Feed.Salk;
divider.Out1.Si = Settler.Feed.Si;
sensor_TSS1.In.Si = Settler.Feed.Si;
divider.Out1.Snd = Settler.Feed.Snd;
sensor_TSS1.In.Snd = Settler.Feed.Snd;
divider.Out1.Snh = Settler.Feed.Snh;
sensor_TSS1.In.Snh = Settler.Feed.Snh;
divider.Out1.Sno = Settler.Feed.Sno;
sensor_TSS1.In.Sno = Settler.Feed.Sno;
divider.Out1.So = Settler.Feed.So;
sensor_TSS1.In.So = Settler.Feed.So;
divider.Out1.Ss = Settler.Feed.Ss;
sensor_TSS1.In.Ss = Settler.Feed.Ss;
divider.Out1.Xba = Settler.Feed.Xba;
sensor_TSS1.In.Xba = Settler.Feed.Xba;
divider.Out1.Xbh = Settler.Feed.Xbh;
sensor_TSS1.In.Xbh = Settler.Feed.Xbh;
divider.Out1.Xi = Settler.Feed.Xi;
sensor_TSS1.In.Xi = Settler.Feed.Xi;
divider.Out1.Xnd = Settler.Feed.Xnd;
sensor_TSS1.In.Xnd = Settler.Feed.Xnd;
divider.Out1.Xp = Settler.Feed.Xp;
sensor_TSS1.In.Xp = Settler.Feed.Xp;
divider.Out1.Xs = Settler.Feed.Xs;
sensor_TSS1.In.Xs = Settler.Feed.Xs;
Settler.Waste.Q+WastePump.In.Q = 0;
WastePump.In.Salk = Settler.Waste.Salk;
WastePump.In.Si = Settler.Waste.Si;
WastePump.In.Snd = Settler.Waste.Snd;
WastePump.In.Snh = Settler.Waste.Snh;
WastePump.In.Sno = Settler.Waste.Sno;
WastePump.In.So = Settler.Waste.So;
WastePump.In.Ss = Settler.Waste.Ss;
WastePump.In.Xba = Settler.Waste.Xba;
WastePump.In.Xbh = Settler.Waste.Xbh;
WastePump.In.Xi = Settler.Waste.Xi;
WastePump.In.Xnd = Settler.Waste.Xnd;
WastePump.In.Xp = Settler.Waste.Xp;
WastePump.In.Xs = Settler.Waste.Xs;
assert(tank1.T.n == Temperature.outPort.n, "Parameters in connected connectors must be equal");
assert(tank2.T.n == Temperature.outPort.n, "Parameters in connected connectors must be equal");
assert(tank3.T.n == Temperature.outPort.n, "Parameters in connected connectors must be equal");
tank1.T.signal = Temperature.outPort.signal;
tank2.T.signal = Temperature.outPort.signal;
tank3.T.signal = Temperature.outPort.signal;
WWSource.Out.Q+mixer.In1.Q = 0;
mixer.In1.Salk = WWSource.Out.Salk;
mixer.In1.Si = WWSource.Out.Si;
mixer.In1.Snd = WWSource.Out.Snd;
mixer.In1.Snh = WWSource.Out.Snh;
mixer.In1.Sno = WWSource.Out.Sno;
mixer.In1.So = WWSource.Out.So;
mixer.In1.Ss = WWSource.Out.Ss;
mixer.In1.Xba = WWSource.Out.Xba;
mixer.In1.Xbh = WWSource.Out.Xbh;
mixer.In1.Xi = WWSource.Out.Xi;
mixer.In1.Xnd = WWSource.Out.Xnd;
mixer.In1.Xp = WWSource.Out.Xp;
mixer.In1.Xs = WWSource.Out.Xs;
WastePump.Out.Q+WasteSludge.In.Q = 0;
WasteSludge.In.Salk = WastePump.Out.Salk;
WasteSludge.In.Si = WastePump.Out.Si;
WasteSludge.In.Snd = WastePump.Out.Snd;
WasteSludge.In.Snh = WastePump.Out.Snh;
WasteSludge.In.Sno = WastePump.Out.Sno;
WasteSludge.In.So = WastePump.Out.So;
WasteSludge.In.Ss = WastePump.Out.Ss;
WasteSludge.In.Xba = WastePump.Out.Xba;
WasteSludge.In.Xbh = WastePump.Out.Xbh;
WasteSludge.In.Xi = WastePump.Out.Xi;
WasteSludge.In.Xnd = WastePump.Out.Xnd;
WasteSludge.In.Xp = WastePump.Out.Xp;
WasteSludge.In.Xs = WastePump.Out.Xs;
blower1.AirOut.Q_air+tank2.AirIn.Q_air = 0;
blower2.AirOut.Q_air+tank3.AirIn.Q_air = 0;
divider.In.Q+tank3.Out.Q = 0;
tank3.Out.Salk = divider.In.Salk;
tank3.Out.Si = divider.In.Si;
tank3.Out.Snd = divider.In.Snd;
tank3.Out.Snh = divider.In.Snh;
tank3.Out.Sno = divider.In.Sno;
tank3.Out.So = divider.In.So;
tank3.Out.Ss = divider.In.Ss;
tank3.Out.Xba = divider.In.Xba;
tank3.Out.Xbh = divider.In.Xbh;
tank3.Out.Xi = divider.In.Xi;
tank3.Out.Xnd = divider.In.Xnd;
tank3.Out.Xp = divider.In.Xp;
tank3.Out.Xs = divider.In.Xs;
mixer.Out.Q+tank1.In.Q = 0;
tank1.In.Salk = mixer.Out.Salk;
tank1.In.Si = mixer.Out.Si;
tank1.In.Snd = mixer.Out.Snd;
tank1.In.Snh = mixer.Out.Snh;
tank1.In.Sno = mixer.Out.Sno;
tank1.In.So = mixer.Out.So;
tank1.In.Ss = mixer.Out.Ss;
tank1.In.Xba = mixer.Out.Xba;
tank1.In.Xbh = mixer.Out.Xbh;
tank1.In.Xi = mixer.Out.Xi;
tank1.In.Xnd = mixer.Out.Xnd;
tank1.In.Xp = mixer.Out.Xp;
tank1.In.Xs = mixer.Out.Xs;
sensor_O2.In.Q+tank3.MeasurePort.Q = 0;
tank3.MeasurePort.Salk = sensor_O2.In.Salk;
tank3.MeasurePort.Si = sensor_O2.In.Si;
tank3.MeasurePort.Snd = sensor_O2.In.Snd;
tank3.MeasurePort.Snh = sensor_O2.In.Snh;
tank3.MeasurePort.Sno = sensor_O2.In.Sno;
tank3.MeasurePort.So = sensor_O2.In.So;
tank3.MeasurePort.Ss = sensor_O2.In.Ss;
tank3.MeasurePort.Xba = sensor_O2.In.Xba;
tank3.MeasurePort.Xbh = sensor_O2.In.Xbh;
tank3.MeasurePort.Xi = sensor_O2.In.Xi;
tank3.MeasurePort.Xnd = sensor_O2.In.Xnd;
tank3.MeasurePort.Xp = sensor_O2.In.Xp;
tank3.MeasurePort.Xs = sensor_O2.In.Xs;
tank1.MeasurePort.Q = 0;
tank1.Out.Q+tank2.In.Q = 0;
tank2.In.Salk = tank1.Out.Salk;
tank2.In.Si = tank1.Out.Si;
tank2.In.Snd = tank1.Out.Snd;
tank2.In.Snh = tank1.Out.Snh;
tank2.In.Sno = tank1.Out.Sno;
tank2.In.So = tank1.Out.So;
tank2.In.Ss = tank1.Out.Ss;
tank2.In.Xba = tank1.Out.Xba;
tank2.In.Xbh = tank1.Out.Xbh;
tank2.In.Xi = tank1.Out.Xi;
tank2.In.Xnd = tank1.Out.Xnd;
tank2.In.Xp = tank1.Out.Xp;
tank2.In.Xs = tank1.Out.Xs;
tank2.MeasurePort.Q = 0;
tank2.Out.Q+tank3.In.Q = 0;
tank3.In.Salk = tank2.Out.Salk;
tank3.In.Si = tank2.Out.Si;
tank3.In.Snd = tank2.Out.Snd;
tank3.In.Snh = tank2.Out.Snh;
tank3.In.Sno = tank2.Out.Sno;
tank3.In.So = tank2.Out.So;
tank3.In.Ss = tank2.Out.Ss;
tank3.In.Xba = tank2.Out.Xba;
tank3.In.Xbh = tank2.Out.Xbh;
tank3.In.Xi = tank2.Out.Xi;
tank3.In.Xnd = tank2.Out.Xnd;
tank3.In.Xp = tank2.Out.Xp;
tank3.In.Xs = tank2.Out.Xs;

initial equation
  Settler.XB = Settler.Feed.Q*Settler.Xf/((-0.7)*(Settler.Return.Q+
    Settler.Waste.Q));

// Copied from small_asm1.mos
tank3.Si = 3.000000000000e+001;
tank3.Ss = 1.768379818970e+000;
tank3.Xi = 1.280658681727e+003;
tank3.Xs = 1.342037061251e+001;
tank3.Xbh = 1.971253187539e+003;
tank3.Xba = 8.953776792719e+001;
tank3.Xp = 7.135293892258e+002;
tank3.So = 1.499999536940e+000;
tank3.Sno = 7.023954787236e+000;
tank3.Snh = 3.469832897751e+000;
tank3.Snd = 6.330054822579e-001;
tank3.Xnd = 1.058875620146e+000;
tank3.Salk = 4.485176510073e+000;
tank2.Si = 3.000000000000e+001;
tank2.Ss = 2.463117211568e+000;
tank2.Xi = 1.278333736389e+003;
tank2.Xs = 2.140590310375e+001;
tank2.Xbh = 1.966614626250e+003;
tank2.Xba = 8.900572493248e+001;
tank2.Xp = 7.113292476107e+002;
tank2.So = 3.632593914266e+000;
tank2.Sno = 4.856770069816e+000;
tank2.Snh = 5.478663911860e+000;
tank2.Snd = 7.252693834073e-001;
tank2.Xnd = 1.586608768203e+000;
tank2.Salk = 4.782438895247e+000;
tank1.Si = 3.000000000000e+001;
tank1.Ss = 2.395032857582e+000;
tank1.Xi = 1.275518549259e+003;
tank1.Xs = 3.770076754487e+001;
tank1.Xbh = 1.956193873766e+003;
tank1.Xba = 8.829237725627e+001;
tank1.Xp = 7.087641710603e+002;
tank1.So = 7.377559296960e-003;
tank1.Sno = 2.060772419090e+000;
tank1.Snh = 8.182199118905e+000;
tank1.Snd = 5.508870585039e-001;
tank1.Xnd = 2.635166937210e+000;
tank1.Salk = 5.179082991135e+000;
PI1.x[1] = -3.511076570565e-004;
Settler.Si1 = 3.000000000000e+001;
Settler.Ss1 = 1.681287279702e+000;
Settler.So1 = 1.499999390854e+000;
Settler.Sno1 = 7.168869418367e+000;
Settler.Snh1 = 2.943675968574e+000;
Settler.Snd1 = 6.126843777685e-001;
Settler.Salk1 = 4.461450405862e+000;
Settler.Si2 = 3.000000000000e+001;
Settler.Ss2 = 1.635315887679e+000;
Settler.So2 = 1.499999562861e+000;
Settler.Sno2 = 7.338549109702e+000;
Settler.Snh2 = 2.791485011898e+000;
Settler.Snd2 = 6.003165935477e-001;
Settler.Salk2 = 4.437580751343e+000;
Settler.hs = 5.029601648736e-001;


end SmallPlantModified;
DAE having 765 scalar unknowns and 765 scalar equations.
