// name: FlatParse
// keywords: Parse flat Modelica
// status: correct
//
// Test the ability to parse flat modelica
// 

model FlatParse
  Real x[2].y[2];
  Real x.y[2].z;
  parameter Real x.y=1.0;
equation
  der(x[2].y[1])=1;
  der(x[2].y[2])=-x.y;
  x.y[2].z = 0;
  assert(1<2,"blah1") "test also the no return function call";
algorithm
  assert(1<2,"blah2") "test also the no return function call";
end FlatParse;
Some tools might put garbage text here. That should be ok. 


// class FlatParse
// Real x[2].y[1];
// Real x[2].y[2];
// Real x.y[2].z;
// parameter Real x.y = 1.0;
// equation
//   der(x[2].y[1]) = 1.0;
//   der(x[2].y[2]) = -x.y;
//   x.y[2].z = 0.0;
// assert(true,"blah1");
// algorithm
//   assert(true, "blah2");
// end FlatParse;


// Result:
// class FlatParse
// Real x[2].y[1];
// Real x[2].y[2];
// Real x.y[2].z;
// parameter Real x.y = 1.0;
// equation
//   der(x[2].y[1]) = 1.0;
//   der(x[2].y[2]) = -x.y;
//   x.y[2].z = 0.0;
// assert(true,"blah1");
// algorithm
//   assert(true, "blah2");
// end FlatParse;
// endResult
