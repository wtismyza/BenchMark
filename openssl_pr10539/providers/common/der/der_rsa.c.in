/*
 * Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#include <openssl/bn.h>
#include <openssl/obj_mac.h>
#include "prov/der_rsa.h"

/* Well known OIDs precompiled */
{-
    $OUT = oids_to_c::process_leaves('providers/common/der/RSA.asn1',
                                     { dir => $config{sourcedir},
                                       filter => \&oids_to_c::filter_to_C });
-}

int DER_w_algorithmIdentifier_RSA(WPACKET *pkt, int tag, RSA *rsa)
{
    return DER_w_begin_sequence(pkt, tag)
        /* No parameters (yet?) */
        && DER_w_precompiled(pkt, -1, der_oid_rsaEncryption,
                             sizeof(der_oid_rsaEncryption))
        && DER_w_end_sequence(pkt, tag);
}

/* Aliases so we can have a uniform MD_CASE */
#define der_oid_sha3_224WithRSAEncryption \
    der_oid_id_rsassa_pkcs1_v1_5_with_sha3_224
#define der_oid_sha3_256WithRSAEncryption \
    der_oid_id_rsassa_pkcs1_v1_5_with_sha3_256
#define der_oid_sha3_384WithRSAEncryption \
    der_oid_id_rsassa_pkcs1_v1_5_with_sha3_384
#define der_oid_sha3_512WithRSAEncryption \
    der_oid_id_rsassa_pkcs1_v1_5_with_sha3_512

#define MD_CASE(name)                                                   \
    case NID_##name:                                                    \
        precompiled = der_oid_##name##WithRSAEncryption;                \
        precompiled_sz = sizeof(der_oid_##name##WithRSAEncryption);     \
        break;

int DER_w_algorithmIdentifier_RSA_with(WPACKET *pkt, int tag,
                                       RSA *rsa, int mdnid)
{
    const unsigned char *precompiled = NULL;
    size_t precompiled_sz = 0;

    switch (mdnid) {
#ifndef FIPS_MODULE
        MD_CASE(md2);
        MD_CASE(md5);
        MD_CASE(md4);
        MD_CASE(ripemd160);
/* TODO(3.0) Decide what to do about mdc2 and md5_sha1 */
#endif
        MD_CASE(sha1);
        MD_CASE(sha224);
        MD_CASE(sha256);
        MD_CASE(sha384);
        MD_CASE(sha512);
        MD_CASE(sha512_224);
        MD_CASE(sha512_256);
        MD_CASE(sha3_224);
        MD_CASE(sha3_256);
        MD_CASE(sha3_384);
        MD_CASE(sha3_512);
    default:
        return 0;
    }

    return DER_w_begin_sequence(pkt, tag)
        /* No parameters (yet?) */
        && DER_w_precompiled(pkt, -1, precompiled, precompiled_sz)
        && DER_w_end_sequence(pkt, tag);
}
