-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Cleanup from other potential tests that created these databases
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
SET client_min_messages TO ERROR;
DROP DATABASE IF EXISTS backend_1_1;
DROP DATABASE IF EXISTS backend_x_2;
DROP DATABASE IF EXISTS backend_2_1;
DROP DATABASE IF EXISTS frontend_1;
DROP DATABASE IF EXISTS frontend_2;
SET client_min_messages TO NOTICE;
----------------------------------------------------------------
-- Test version compability function
CREATE OR REPLACE FUNCTION compatible_version(version CSTRING, reference CSTRING)
RETURNS TABLE(is_compatible BOOLEAN, is_old_version BOOLEAN)
AS :TSL_MODULE_PATHNAME, 'ts_test_compatible_version'
LANGUAGE C VOLATILE;
SELECT * FROM compatible_version('2.0.0-beta3.19', reference => '2.0.0-beta3.19');
 is_compatible | is_old_version 
---------------+----------------
 t             | f
(1 row)

SELECT * FROM compatible_version('2.0.0', reference => '2.0.0');
 is_compatible | is_old_version 
---------------+----------------
 t             | f
(1 row)

SELECT * FROM compatible_version('1.9.9', reference => '2.0.0-beta3.19');
 is_compatible | is_old_version 
---------------+----------------
 f             | t
(1 row)

SELECT * FROM compatible_version('1.9.9', reference => '2.0.0');
 is_compatible | is_old_version 
---------------+----------------
 f             | t
(1 row)

SELECT * FROM compatible_version('2.0.9', reference => '2.0.0-beta3.19');
 is_compatible | is_old_version 
---------------+----------------
 t             | f
(1 row)

SELECT * FROM compatible_version('2.0.9', reference => '2.0.0');
 is_compatible | is_old_version 
---------------+----------------
 t             | f
(1 row)

SELECT * FROM compatible_version('2.1.9', reference => '2.0.0-beta3.19');
 is_compatible | is_old_version 
---------------+----------------
 f             | f
(1 row)

SELECT * FROM compatible_version('2.1.0', reference => '2.1.19-beta3.19');
 is_compatible | is_old_version 
---------------+----------------
 t             | t
(1 row)

-- These should not parse and instead generate an error.
\set ON_ERROR_STOP 0
SELECT * FROM compatible_version('2.1.*', reference => '2.1.19-beta3.19');
ERROR:  invalid data node version 2.1.*
SELECT * FROM compatible_version('2.1.0', reference => '2.1.*');
ERROR:  invalid access node version 2.1.*
\set ON_ERROR_STOP 1
----------------------------------------------------------------
-- Create two distributed databases
CREATE DATABASE frontend_1;
CREATE DATABASE frontend_2;
\c frontend_1 :ROLE_CLUSTER_SUPERUSER
SET client_min_messages TO ERROR;
CREATE EXTENSION timescaledb;
UPDATE _timescaledb_catalog.metadata SET value = '87c235e9-d857-4f16-b59f-7fbac9b87664' WHERE key = 'uuid';
SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE '%uuid';
 key  |                value                 
------+--------------------------------------
 uuid | 87c235e9-d857-4f16-b59f-7fbac9b87664
(1 row)

SELECT * FROM add_data_node('data_node_1', host => 'localhost', database => 'backend_1_1');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_1 | localhost | 55432 | backend_1_1 | t            | t                | t
(1 row)

SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE '%uuid';
    key    |                value                 
-----------+--------------------------------------
 uuid      | 87c235e9-d857-4f16-b59f-7fbac9b87664
 dist_uuid | 87c235e9-d857-4f16-b59f-7fbac9b87664
(2 rows)

SET client_min_messages TO NOTICE;
-- Create a second frontend database and add a backend to it
\c frontend_2 :ROLE_CLUSTER_SUPERUSER
SET client_min_messages TO ERROR;
CREATE EXTENSION timescaledb;
UPDATE _timescaledb_catalog.metadata SET value = '77348176-09da-4a80-bc78-e31bdf5e63ec' WHERE key = 'uuid';
SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE '%uuid';
 key  |                value                 
------+--------------------------------------
 uuid | 77348176-09da-4a80-bc78-e31bdf5e63ec
(1 row)

SELECT * FROM add_data_node('data_node_1', host => 'localhost', database => 'backend_2_1');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_1 | localhost | 55432 | backend_2_1 | t            | t                | t
(1 row)

SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE '%uuid';
    key    |                value                 
-----------+--------------------------------------
 uuid      | 77348176-09da-4a80-bc78-e31bdf5e63ec
 dist_uuid | 77348176-09da-4a80-bc78-e31bdf5e63ec
(2 rows)

SET client_min_messages TO NOTICE;
\set ON_ERROR_STOP 0
----------------------------------------------------------------
-- Adding frontend as backend to a different frontend should fail
\c frontend_1 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'frontend_2', bootstrap => true);
NOTICE:  database "frontend_2" already exists on data node, skipping
NOTICE:  extension "timescaledb" already exists on data node, skipping
ERROR:  [invalid_data_node]: database is already a member of a distributed database
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'frontend_2', bootstrap => false);
ERROR:  invalid_data_node is not valid as data node
----------------------------------------------------------------
-- Adding backend from a different group as a backend should fail
\c frontend_1 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'backend_2_1', bootstrap => true);
NOTICE:  database "backend_2_1" already exists on data node, skipping
NOTICE:  extension "timescaledb" already exists on data node, skipping
ERROR:  [invalid_data_node]: database is already a member of a distributed database
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'backend_2_1', bootstrap => false);
ERROR:  invalid_data_node is not valid as data node
----------------------------------------------------------------
-- Adding a valid backend target but to an existing backend should fail
\c backend_1_1 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'backend_2_1', bootstrap => true);
ERROR:  unable to assign data nodes from an existing distributed database
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'backend_2_1', bootstrap => false);
ERROR:  unable to assign data nodes from an existing distributed database
----------------------------------------------------------------
-- Adding a frontend (frontend 1) as a backend to a nondistributed node (TEST_DBNAME) should fail
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'frontend_1', bootstrap => true);
NOTICE:  database "frontend_1" already exists on data node, skipping
NOTICE:  extension "timescaledb" already exists on data node, skipping
ERROR:  [invalid_data_node]: database is already a member of a distributed database
SELECT * FROM add_data_node('invalid_data_node', host => 'localhost', database => 'frontend_1', bootstrap => false);
ERROR:  invalid_data_node is not valid as data node
\set ON_ERROR_STOP 1
----------------------------------------------------------------
-- Test that a data node can be moved to a different frontend if it is
-- removed first.
\c frontend_1 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('data_node_2', host => 'localhost', database => 'backend_x_2', bootstrap => true);
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_2 | localhost | 55432 | backend_x_2 | t            | t                | t
(1 row)

-- dist_uuid should be added to the metadata on the data node
\c backend_x_2 :ROLE_CLUSTER_SUPERUSER
SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE 'dist_uuid';
    key    |                value                 
-----------+--------------------------------------
 dist_uuid | 87c235e9-d857-4f16-b59f-7fbac9b87664
(1 row)

-- Now remove a backend from this distributed database to add it to the other cluster
\c frontend_1 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM delete_data_node('data_node_2');
 delete_data_node 
------------------
 t
(1 row)

-- dist_uuid should not be removed from the metadata on the data node,
-- so we need to delete it manually before adding it to another
-- backend.
\c backend_x_2 :ROLE_CLUSTER_SUPERUSER
SELECT key FROM _timescaledb_catalog.metadata WHERE key = 'dist_uuid';
    key    
-----------
 dist_uuid
(1 row)

DELETE FROM _timescaledb_catalog.metadata WHERE key = 'dist_uuid';
-- Add the data node to the second frontend without bootstrapping
\c frontend_2 :ROLE_CLUSTER_SUPERUSER
SELECT * FROM add_data_node('data_node_2', host => 'localhost', database => 'backend_x_2', bootstrap => false);
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_2 | localhost | 55432 | backend_x_2 | t            | f                | f
(1 row)

-- dist_uuid should be added to the metadata on the data node
\c backend_x_2 :ROLE_CLUSTER_SUPERUSER
SELECT key, value FROM _timescaledb_catalog.metadata WHERE key LIKE 'dist_uuid';
    key    |                value                 
-----------+--------------------------------------
 dist_uuid | 77348176-09da-4a80-bc78-e31bdf5e63ec
(1 row)

-- Test space reporting functions for distributed and non-distributed tables
\c frontend_2 :ROLE_CLUSTER_SUPERUSER
CREATE TABLE nondisttable(time timestamptz PRIMARY KEY, device int CHECK (device > 0), temp float);
CREATE TABLE disttable(time timestamptz PRIMARY KEY, device int CHECK (device > 0), temp float);
SELECT * FROM create_hypertable('nondisttable', 'time');
 hypertable_id | schema_name |  table_name  | created 
---------------+-------------+--------------+---------
             1 | public      | nondisttable | t
(1 row)

SELECT * FROM create_distributed_hypertable('disttable', 'time');
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             2 | public      | disttable  | t
(1 row)

INSERT INTO nondisttable VALUES
       ('2017-01-01 06:01', 1, 1.1),
       ('2017-01-01 08:01', 1, 1.2),
       ('2018-01-02 08:01', 2, 1.3),
       ('2019-01-01 09:11', 3, 2.1),
       ('2017-01-01 06:05', 1, 1.4);
INSERT INTO disttable VALUES
       ('2017-01-01 06:01', 1, 1.1),
       ('2017-01-01 08:01', 1, 1.2),
       ('2018-01-02 08:01', 2, 1.3),
       ('2019-01-01 09:11', 3, 2.1),
       ('2017-01-01 06:05', 1, 1.4);
SELECT * FROM timescaledb_information.data_nodes ORDER BY node_name;
  node_name  |       owner        |                    options                     
-------------+--------------------+------------------------------------------------
 data_node_1 | cluster_super_user | {host=localhost,port=55432,dbname=backend_2_1}
 data_node_2 | cluster_super_user | {host=localhost,port=55432,dbname=backend_x_2}
(2 rows)

SELECT * FROM timescaledb_information.hypertables ORDER BY hypertable_schema, hypertable_name;
 hypertable_schema | hypertable_name |       owner        | num_dimensions | num_chunks | compression_enabled | is_distributed | replication_factor |        data_nodes         | tablespaces 
-------------------+-----------------+--------------------+----------------+------------+---------------------+----------------+--------------------+---------------------------+-------------
 public            | disttable       | cluster_super_user |              1 |          3 | f                   | t              |                  1 | {data_node_1,data_node_2} | 
 public            | nondisttable    | cluster_super_user |              1 |          3 | f                   | f              |                    |                           | 
(2 rows)

SELECT * FROM hypertable_detailed_size('disttable') ORDER BY node_name;
 table_bytes | index_bytes | toast_bytes | total_bytes |  node_name  
-------------+-------------+-------------+-------------+-------------
       16384 |       32768 |           0 |       49152 | data_node_1
        8192 |       16384 |           0 |       24576 | data_node_2
(2 rows)

SELECT * FROM hypertable_detailed_size('nondisttable') ORDER BY node_name;
 table_bytes | index_bytes | toast_bytes | total_bytes | node_name 
-------------+-------------+-------------+-------------+-----------
       24576 |       49152 |           0 |       73728 | 
(1 row)

SELECT * FROM hypertable_size('disttable') ;
 hypertable_size 
-----------------
           73728
(1 row)

SELECT * FROM hypertable_size('nondisttable') ;
 hypertable_size 
-----------------
           73728
(1 row)

