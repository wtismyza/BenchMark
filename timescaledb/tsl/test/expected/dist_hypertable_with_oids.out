-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Need to be super user to create extension and add data nodes
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
\unset ECHO
psql:include/filter_exec.sql:5: NOTICE:  schema "test" already exists, skipping
psql:include/remote_exec.sql:5: NOTICE:  schema "test" already exists, skipping
-- Cleanup from other potential tests that created these databases
SET client_min_messages TO ERROR;
DROP DATABASE IF EXISTS data_node_1;
DROP DATABASE IF EXISTS data_node_2;
DROP DATABASE IF EXISTS data_node_3;
SET client_min_messages TO NOTICE;
-- Add data nodes using the TimescaleDB node management API
SELECT * FROM add_data_node('data_node_1', host => 'localhost',
                            database => 'data_node_1');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_1 | localhost | 55432 | data_node_1 | t            | t                | t
(1 row)

SELECT * FROM add_data_node('data_node_2', host => 'localhost',
                            database => 'data_node_2');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_2 | localhost | 55432 | data_node_2 | t            | t                | t
(1 row)

SELECT * FROM add_data_node('data_node_3', host => 'localhost',
                            database => 'data_node_3');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_3 | localhost | 55432 | data_node_3 | t            | t                | t
(1 row)

GRANT USAGE ON FOREIGN SERVER data_node_1, data_node_2, data_node_3 TO PUBLIC;
SET ROLE :ROLE_1;
-- Create distributed hypertables.
CREATE TABLE disttable_with_relopts_1(time timestamptz NOT NULL, device int CHECK (device > 0));
SELECT * FROM create_distributed_hypertable('disttable_with_relopts_1', 'time', 'device', 2);
WARNING:  the number of partitions in dimension "device" is too low to make use of all attached data nodes
 hypertable_id | schema_name |        table_name        | created 
---------------+-------------+--------------------------+---------
             1 | public      | disttable_with_relopts_1 | t
(1 row)

-- Create some chunks
INSERT INTO disttable_with_relopts_1 VALUES
       ('2017-01-01 06:01', 1),
       ('2017-01-01 09:11', 3),
       ('2017-01-01 08:01', 1),
       ('2017-01-02 08:01', 2),
       ('2018-07-02 08:01', 87);
-- WITH OIDS
ALTER TABLE disttable_with_relopts_1 SET WITH OIDS;
SELECT relname, relhasoids FROM pg_class WHERE relname = 'disttable_with_relopts_1' ORDER BY relname;
         relname          | relhasoids 
--------------------------+------------
 disttable_with_relopts_1 | t
(1 row)

-- Ensure chunks are not affected on the AN
SELECT relname, relhasoids FROM pg_class WHERE relname IN
(SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
ORDER BY relname;
        relname        | relhasoids 
-----------------------+------------
 _dist_hyper_1_1_chunk | t
 _dist_hyper_1_2_chunk | t
 _dist_hyper_1_3_chunk | t
(3 rows)

-- Ensure data node chunks properly updated
SELECT * FROM test.remote_exec('{ data_node_1, data_node_2, data_node_3 }',$$
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname;
$$);
NOTICE:  [data_node_1]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_1]:
relname              |relhasoids
---------------------+----------
_dist_hyper_1_1_chunk|t         
_dist_hyper_1_3_chunk|t         
(2 rows)


NOTICE:  [data_node_2]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_2]:
relname              |relhasoids
---------------------+----------
_dist_hyper_1_2_chunk|t         
(1 row)


NOTICE:  [data_node_3]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_3]:
relname|relhasoids
-------+----------
(0 rows)


 remote_exec 
-------------
 
(1 row)

SELECT true FROM disttable_with_relopts_1 WHERE oid >= 0 LIMIT 1;
 bool 
------
 t
(1 row)

-- Test WITHOUT OIDS -- NOTE that this is still supported in PG12 for
-- backwards compatibilty, but does nothing since WITH OIDS is not
-- supported
ALTER TABLE disttable_with_relopts_1 SET WITHOUT OIDS;
SELECT relname, relhasoids FROM pg_class WHERE relname = 'disttable_with_relopts_1' ORDER BY relname;
         relname          | relhasoids 
--------------------------+------------
 disttable_with_relopts_1 | f
(1 row)

-- Ensure chunks are not affected on the AN
SELECT relname, relhasoids FROM pg_class WHERE relname IN
(SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
ORDER BY relname;
        relname        | relhasoids 
-----------------------+------------
 _dist_hyper_1_1_chunk | f
 _dist_hyper_1_2_chunk | f
 _dist_hyper_1_3_chunk | f
(3 rows)

-- Ensure data node chunks properly updated
SELECT * FROM test.remote_exec('{ data_node_1, data_node_2, data_node_3 }',$$
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname;
$$);
NOTICE:  [data_node_1]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_1]:
relname              |relhasoids
---------------------+----------
_dist_hyper_1_1_chunk|f         
_dist_hyper_1_3_chunk|f         
(2 rows)


NOTICE:  [data_node_2]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_2]:
relname              |relhasoids
---------------------+----------
_dist_hyper_1_2_chunk|f         
(1 row)


NOTICE:  [data_node_3]: 
    SELECT relname, relhasoids FROM pg_class WHERE relname IN
    (SELECT (_timescaledb_internal.show_chunk(show_chunks)).table_name FROM show_chunks('disttable_with_relopts_1'))
    ORDER BY relname
NOTICE:  [data_node_3]:
relname|relhasoids
-------+----------
(0 rows)


 remote_exec 
-------------
 
(1 row)

\set ON_ERROR_STOP 0
-- OID column removed
SELECT true FROM disttable_with_relopts_1 WHERE oid >= 0 LIMIT 1;
ERROR:  column "oid" does not exist at character 49
\set ON_ERROR_STOP 1
DROP TABLE disttable_with_relopts_1;
