name: Regression
on:
  schedule:
    # run daily 20:00 on master branch
    - cron: '0 20 * * *'
  push:
    branches:
      - prerelease_test
  pull_request:
jobs:
  matrixbuilder:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2

    - id: set-matrix
      run: python scripts/gh_matrix_builder.py ${{ github.event_name }}

  regress:
    name: PG${{ matrix.pg }} ${{ matrix.name }} ${{ matrix.os }}
    needs: matrixbuilder
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.matrixbuilder.outputs.matrix) }}
      fail-fast: false
    env:
      PG_SRC_DIR: pgbuild
      PG_INSTALL_DIR: postgresql
      MAKE_JOBS: 6
      CLANG: ${{ matrix.clang }}
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:
    - name: Install Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install flex bison lcov systemd-coredump gdb ${{ matrix.extra_packages }}

    # on macOS the path used is depending on the runner version leading to cache failure
    # when the runner version changes so we extract runner version from path and add it
    # as cache suffix
    - name: Cache suffix
      if: runner.os == 'macOS'
      run: echo "CACHE_SUFFIX=-${ImageVersion}" >> $GITHUB_ENV

    # we cache the build directory instead of the install directory here
    # because extension installation will write files to install directory
    # leading to a tainted cache
    - name: Cache PostgreSQL ${{ matrix.pg }} ${{ matrix.build_type }}
      id: cache-postgresql
      uses: actions/cache@v2
      with:
        path: ~/${{ env.PG_SRC_DIR }}
        key: ${{ matrix.os }}-postgresql-${{ matrix.pg }}-${{ matrix.cc }}-${{ matrix.build_type }}${{ env.CACHE_SUFFIX }}

    - name: Build PostgreSQL ${{ matrix.pg }} ${{ matrix.build_type }}
      if: steps.cache-postgresql.outputs.cache-hit != 'true'
      run: |
        wget -q -O postgresql.tar.bz2 https://ftp.postgresql.org/pub/source/v${{ matrix.pg }}/postgresql-${{ matrix.pg }}.tar.bz2
        mkdir -p ~/$PG_SRC_DIR
        tar --extract --file postgresql.tar.bz2 --directory ~/$PG_SRC_DIR --strip-components 1
        cd ~/$PG_SRC_DIR
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          ./configure --prefix=$HOME/$PG_INSTALL_DIR ${{ matrix.pg_build_args }} --with-llvm LLVM_CONFIG=${{ matrix.llvm_config }} --with-openssl --without-readline --without-zlib --without-libxml ${{ matrix.pg_extra_args }}
        else
          # the current github macos image has a buggy llvm installation so we build without llvm on mac
          ./configure --prefix=$HOME/$PG_INSTALL_DIR ${{ matrix.pg_build_args }} --with-openssl --without-readline --without-zlib --without-libxml ${{ matrix.pg_extra_args }}
        fi
        make -j $MAKE_JOBS
        make -j $MAKE_JOBS -C src/test/isolation
        make -j $MAKE_JOBS -C contrib/postgres_fdw

    - name: Install PostgreSQL ${{ matrix.pg }} ${{ matrix.build_type }}
      run: |
        make -C ~/$PG_SRC_DIR install
        make -C ~/$PG_SRC_DIR/contrib/postgres_fdw install

    - name: Checkout TimescaleDB
      uses: actions/checkout@v2

    - name: Test telemetry without OpenSSL
      if: github.event_name != 'pull_request' && runner.os == 'Linux' && matrix.build_type == 'Debug'
      run: |
        BUILD_DIR=nossl ./bootstrap -DCMAKE_BUILD_TYPE=Debug -DPG_SOURCE_DIR=~/$PG_SRC_DIR -DPG_PATH=~/$PG_INSTALL_DIR -DUSE_OPENSSL=false
        make -j $MAKE_JOBS -C nossl
        make -C nossl install
        make -C nossl regresscheck TESTS=telemetry

    - name: Build TimescaleDB
      run: |
        ./bootstrap -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DPG_SOURCE_DIR=~/$PG_SRC_DIR -DPG_PATH=~/$PG_INSTALL_DIR ${{ matrix.tsdb_build_args }}
        make -j $MAKE_JOBS -C build
        make -C build install

    - name: Check exported symbols
      run: ./build/scripts/export_prefix_check.sh

    - name: make installcheck
      id: installcheck
      run: |
        set -o pipefail
        make -k -C build installcheck ${{ matrix.installcheck_args }} | tee installcheck.log

    - name: pginstallcheck
      run: make -C build pginstallcheck

    - name: coverage
      if: matrix.coverage
      run: make -j $MAKE_JOBS -k -C build coverage

    - name: Upload coverage report
      if: matrix.coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./build/codecov/timescaledb-codecov.info

    - name: Show regression diffs
      if: always()
      id: collectlogs
      run: |
        find . -name regression.diffs -exec cat {} + > regression.log
        find . -name postmaster.log -exec cat {} + > postgres.log
        if [[ "${{ runner.os }}" == "Linux" ]] && coredumpctl -q list >/dev/null; then echo "::set-output name=coredumps::true"; fi
        if [[ -s regression.log ]]; then echo "::set-output name=regression_diff::true"; fi
        grep -e 'FAILED' -e 'failed (ignored)' installcheck.log || true
        cat regression.log

    - name: Save regression diffs
      if: always() && steps.collectlogs.outputs.regression_diff == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: Regression diff ${{ matrix.os }} ${{ matrix.name }} ${{ matrix.pg }}
        path: regression.log

    - name: Save postmaster.log
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: PostgreSQL log ${{ matrix.os }} ${{ matrix.name }} ${{ matrix.pg }}
        path: postgres.log

    - name: Stack trace
      if: always() && steps.collectlogs.outputs.coredumps == 'true'
      run: |
        sleep 10 # wait for in progress coredumps to finish
        echo "bt full" | sudo coredumpctl gdb
        ./scripts/bundle_coredumps.sh
        false

    - name: Coredumps
      if: always() && steps.collectlogs.outputs.coredumps == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: Coredumps ${{ matrix.os }} ${{ matrix.name }} ${{ matrix.pg }}
        path: coredumps

    - name: Slack Notification
      if: failure() && github.event_name != 'pull_request'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: '#ff0000'
        SLACK_USERNAME: GitHub Action
        SLACK_TITLE: Regression ${{ matrix.os }} PG${{ matrix.pg }} ${{ matrix.name }} ${{ job.status }}
        SLACK_MESSAGE: ${{ github.event.head_commit.message }}
      uses: rtCamp/action-slack-notify@v2.0.2
