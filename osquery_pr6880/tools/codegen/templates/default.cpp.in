/**
 * Copyright (c) 2014-present, The osquery authors
 *
 * This source code is licensed as defined by the LICENSE file found in the
 * root directory of this source tree.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR GPL-2.0-only)
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/events/events.h>
#include <osquery/logger/logger.h>
#include <osquery/core/tables.h>
#include <osquery/registry/registry_factory.h>

namespace osquery {

/// BEGIN[GENTABLE]
namespace tables {
${ if class_name == "": }$\
${ if generator: }$\
void ${ function }$(RowYield& yield, QueryContext& context);
${ :elif strongly_typed_rows: }$\
osquery::TableRows ${ function }$(QueryContext& context);
${ :else: }$\
osquery::QueryData ${ function }$(QueryContext& context);
${ :end-if }$\
${ :else: }$
class ${ class_name }$ {
 public:
  void ${ function }$(RowYield& yield, QueryContext& context);
};
${ :end-if }$\
}

class ${ table_name_cc }$TablePlugin : public TablePlugin {
 private:
  TableColumns columns() const override {
    return {
${ for column in schema: }$\
      std::make_tuple("${ write(column.name) }$", ${ write(column.type.affinity) }$,\
${ if len(column.options) > 0: }$ ${ write(column.options_set) }$\
${ :else: }$ ColumnOptions::DEFAULT\
${ :end-if }$\
),
${ :end-for }$\
    };
  }
${ if len(aliases) > 0: }$\

  std::vector<std::string> aliases() const override {
    return {
${ for alias in aliases: }$\
      "${ alias }$",
${ :end-for }$\
    };
  }
${ :end-if }$\

${ if has_column_aliases: }$\

  ColumnAliasSet columnAliases() const override {
    return {
${ for column in schema: }$\
${ if len(column.aliases) > 0: }$\
      {"${ write(column.name) }$", {\
${ for i, alias in enumerate(column.aliases): }$"${ alias }$"\
${ if i != len(column.aliases) - 1: }$, ${ :end-if }$\
${ :end-for }$ }},
${ :end-if }$\
${ :end-for }$\
    };
  }

  AliasColumnMap aliasedColumns() const override {
    return {
${ for column in schema: }$\
${ if len(column.aliases) > 0: }$\
${ for alias in column.aliases: }$\
      { "${ alias }$", "${ write(column.name) }$" },
${ :end-for }$\
${ :end-if }$\
${ :end-for }$\
    };
  }
${ :end-if }$\

  TableAttributes attributes() const override {
    return \
${ for attribute in attribute_set: }$\
      TableAttributes::${ attribute }$ |\
${ :end-for }$\
      TableAttributes::NONE;
  }

${ if generator: }$\
  bool usesGenerator() const override { return true; }

  void generator(RowYield& yield, QueryContext& context) override {
${ if class_name != "": }$\
    if (EventFactory::exists(getName())) {
      auto subscriber = EventFactory::getEventSubscriber(getName());
      return subscriber->${ function }$(yield, context);
    } else {
      LOG(ERROR) << "Subscriber table missing: " << getName();
    }
${ :else: }$\
    tables::${ function }$(yield, context);
${ :end-if }$\
  }
${ :else: }$\
  TableRows generate(QueryContext& context) override {
${ if "cacheable" in attributes: }$\
    if (isCached(kCacheStep, context)) {
      return getCache();
    }
${ :end-if }$\
${ if "strongly_typed_rows" in attributes: }$\
    TableRows results = tables::${ function }$(context);
${ :else: }$\
    TableRows results = osquery::tableRowsFromQueryData(tables::${ function }$(context));
${ :end-if }$
${ if "cacheable" in attributes: }$\
    setCache(kCacheStep, kCacheInterval, context, results);
${ :end-if }$
    return results;
  }
${ :end-if }$\

};

${ if "utility" in attributes: }$
REGISTER_INTERNAL(${ table_name_cc }$TablePlugin, "table", "${ table_name }$");
${ :else: }$
REGISTER(${ table_name_cc }$TablePlugin, "table", "${ table_name }$");
${ :end-if }$
/// END[GENTABLE]

}
