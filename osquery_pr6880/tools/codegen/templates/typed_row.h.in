/**
 * Copyright (c) 2014-present, The osquery authors
 *
 * This source code is licensed as defined by the LICENSE file found in the
 * root directory of this source tree.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR GPL-2.0-only)
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/core/tables.h>

namespace osquery {
namespace tables {

class ${ table_name_ucc }$Row : public TableRow {
public:
  ${ table_name_ucc }$Row() {
  }

${ for column in schema: }$\
  ${ write(column.type.type) }$ ${ write(column.name) }$_col;
${ :end-for }$\

  enum Column {
${ for i, column in enumerate(schema): }$\
${   if i < 63: }$\
    ${ write(column.name.upper()) }$ = 1ULL << ${ i }$,
${   :else: }$\
    ${ write(column.name.upper()) }$ = 1ULL << 63,
${   :end-if }$\
${ :end-for }$\
  };

  virtual int get_rowid(sqlite_int64 default_value, sqlite_int64* pRowid) const override {
${ filtered = [i for i in schema if i in ["rowid"]] }$\
${ if len(filtered) == 1: }$\
    *pRowid = rowid_col;
${ :else: }$\
    *pRowid = default_value;
${ :end-if }$\
    return SQLITE_OK;
  }

  virtual int get_column(sqlite3_context* ctx, sqlite3_vtab* vtab, int col) override {
    switch (col) {
${ for i, column in enumerate(schema): }$\
      case ${ i }$:
${   if column.type.affinity == "TEXT_TYPE": }$\
        sqlite3_result_text(ctx, ${ write(column.name) }$_col.c_str(), static_cast<int>(${ write(column.name) }$_col.size()), SQLITE_STATIC);
${   :elif column.type.affinity == "INTEGER_TYPE": }$\
        sqlite3_result_int(ctx, ${ write(column.name) }$_col);
${   :elif column.type.affinity == "BIGINT_TYPE" or column.type.affinity == "UNSIGNED_BIGINT_TYPE": }$\
        sqlite3_result_int64(ctx, ${ write(column.name) }$_col);
${   :elif column.type.affinity == "DOUBLE_TYPE": }$\
        sqlite3_result_double(ctx, ${ write(column.name) }$_col);
${   :end-if  }$\
      break;
${ :end-for }$\
    }
    return SQLITE_OK;
  }

  virtual Status serialize(JSON& doc, rapidjson::Value& obj) const override {
${ for column in schema: }$\
${   if column.type.affinity == "TEXT_TYPE": }$\
    doc.addRef("${ write(column.name) }$", ${ write(column.name) }$_col, obj);
${   :else: }$\
    doc.add("${ write(column.name) }$", ${ write(column.name) }$_col, obj);
${   :end-if  }$\
${ :end-for }$\

    return Status();
  }

  virtual operator Row() const override {
    Row result;

${ for column in schema: }$\
${   if column.type.affinity == "TEXT_TYPE": }$\
    result["${ write(column.name) }$"] = ${ write(column.name) }$_col;
${   :elif column.type.affinity == "INTEGER_TYPE": }$\
    result["${ write(column.name) }$"] = INTEGER(${ write(column.name) }$_col);
${   :elif column.type.affinity == "BIGINT_TYPE": }$\
    result["${ write(column.name) }$"] = BIGINT(${ write(column.name) }$_col);
${   :elif column.type.affinity == "UNSIGNED_BIGINT_TYPE": }$\
    result["${ write(column.name) }$"] = UNSIGNED_BIGINT(${ write(column.name) }$_col);
${   :elif column.type.affinity == "DOUBLE_TYPE": }$\
    result["${ write(column.name) }$"] = DOUBLE(${ write(column.name) }$_col);
${   :end-if  }$\
${ :end-for }$\

    return result;
  }

  virtual TableRowHolder clone() const override {
    return TableRowHolder(new ${ table_name_ucc }$Row(*this));
  }
};
}
}
